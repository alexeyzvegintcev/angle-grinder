(function() {
    var forms;
    angular.module("ui.bootstrap.datepicker").config([ "$provide", function($provide) {
        return $provide.decorator("daypickerDirective", [ "$delegate", function($delegate) {
            var directive, oldCompile;
            directive = $delegate[0];
            oldCompile = directive.compile;
            directive.compile = function() {
                var link;
                link = oldCompile.apply(this, arguments);
                return function(scope) {
                    link.apply(this, arguments);
                    return scope.$watch("rows", function() {
                        return angular.forEach(scope.rows, function(row) {
                            if (_.every(row, function(dt) {
                                return dt.secondary;
                            })) {
                                return _.map(row, function(dt) {
                                    return dt.hide = true;
                                });
                            }
                        });
                    });
                };
            };
            return $delegate;
        } ]);
    } ]);
    forms = angular.module("angleGrinder.forms", [ "ui.bootstrap.collapse", "ui.bootstrap.accordion", "ui.bootstrap.alert", "ui.bootstrap.buttons", "ui.bootstrap.carousel", "ui.bootstrap.dateparser", "ui.bootstrap.position", "ui.bootstrap.dropdown", "ui.bootstrap.stackedMap", "ui.bootstrap.modal", "ui.bootstrap.pagination", "ui.bootstrap.progressbar", "ui.bootstrap.rating", "ui.bootstrap.tabs", "ui.bootstrap.tpls", "ui.bootstrap.tooltip", "xeditable", "angleGrinder.common", "angleGrinder.alerts" ]);
    forms.run([ "$templateCache", function($templateCache) {
        $templateCache.put("template/pagination/pagination.html", '<ul class="pagination">\n  <li ng-class="{disabled: noPrevious(), previous: align}">\n    <a href ng-click="selectPage(page - 1)">{{getText(\'previous\')}}</a>\n  </li>\n\n  <li ng-repeat="page in pages" ng-class="{active: page.active, disabled: page.disabled}">\n    <a ng-click="selectPage(page.number)">{{page.text}}</a>\n  </li>\n\n  <li ng-class="{disabled: noNext(), next: align}">\n    <a href ng-click="selectPage(page + 1)">{{getText(\'next\')}}</a>\n  </li>\n</ul>');
        return $templateCache.put("tooltip/tooltip.tpl.html", '<div class="tooltip in" ng-show="title">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" ng-bind="title"></div>\n</div>');
    } ]);
    forms.config([ "$provide", function($provide) {
        return $provide.decorator("selectDirective", [ "$delegate", function($delegate) {
            var directive, link;
            directive = $delegate[0];
            link = directive.link;
            directive.compile = function(element, attrs) {
                return {
                    "post": function(scope, element, attrs, ctrl) {
                        var template;
                        if (!(element.parent().attr("class") === "select-wrapper") && element.attr("ui-select2") === void 0) {
                            template = angular.element("<div class='select-wrapper'></div>");
                            element.wrap(template);
                        }
                        return link(scope, element, attrs, ctrl);
                    }
                };
            };
            return $delegate;
        } ]);
    } ]);
}).call(this);

(function() {
    var app;
    app = angular.module("angleGrinder.forms");
    app.directive("editableCustom", [ "editableDirectiveFactory", function(editableDirectiveFactory) {
        var compile, result;
        result = editableDirectiveFactory({
            "directiveName": "editableCustom"
        });
        compile = result.compile;
        result.compile = function(element) {
            var link, templateEl, tpl;
            templateEl = element.next("[editable-custom-template]");
            tpl = templateEl.html();
            templateEl.remove();
            compile.apply(this, arguments);
            link = result.link;
            return function(scope, element, attrs, ctrl) {
                var eCtrl;
                eCtrl = ctrl[0];
                eCtrl.inputTpl = tpl;
                return link.apply(this, arguments);
            };
        };
        return result;
    } ]);
}).call(this);

(function() {
    var forms;
    forms = angular.module("angleGrinder.forms");
    forms.directive("editableDatepicker", [ "editableDirectiveFactory", "$filter", function(editableDirectiveFactory, $filter) {
        return editableDirectiveFactory({
            "directiveName": "editableDatepicker",
            "inputTpl": '<ag-datepicker ng-model="$data"></ag-datepicker>',
            "render": function() {
                return this.parent.render.call(this);
            }
        });
    } ]);
}).call(this);

(function() {
    var app;
    app = angular.module("angleGrinder.forms");
    app.directive("editableFormButtons", [ "$parse", function($parse) {
        return {
            "restrict": "A",
            "scope": {
                "form": "=editableFormButtons",
                "cancelCallBack": "&oncancel"
            },
            "link": function(scope, element, attrs) {
                return scope.cancel = function() {
                    scope.form.$cancel();
                    if (scope.cancelCallBack != null) {
                        return scope.cancelCallBack();
                    }
                };
            },
            "template": '<div class="buttons">\n  <!--\n  <button type="button" class="btn btn-default"\n          ng-click="form.$show()"\n          ng-if="!form.$visible">\n    Edit\n  </button>\n  -->\n  <span ng-if="form.$visible">\n    <button type="submit" class="btn btn-default btn-primary" ng-disabled="form.$invalid || form.$waiting"> Save </button>\n    <button type="button" class="btn btn-default" ng-disabled="form.$waiting" ng-click="cancel()"> Cancel </button>\n  </span>\n</div>'
        };
    } ]);
}).call(this);

(function() {
    var forms;
    forms = angular.module("angleGrinder.forms");
    forms.directive("editableSelect2", [ "editableDirectiveFactory", function(editableDirectiveFactory) {
        return editableDirectiveFactory({
            "directiveName": "editableSelect2",
            "inputTpl": '<input type="hidden" ng-model="$data" />'
        });
    } ]);
}).call(this);

(function() {
    var forms;
    forms = angular.module("angleGrinder.forms");
    forms.config([ "$provide", function($provide) {
        return $provide.decorator("editableDirectiveFactory", [ "$delegate", "validationMessages", function($delegate, validationMessages) {
            var errorsFor;
            errorsFor = function(model) {
                var callback;
                callback = function(result, invalid, error) {
                    if (invalid) {
                        result.push(validationMessages[error]);
                    }
                    return result;
                };
                return _.reduce(model.$error, callback, []).join(", ");
            };
            return function() {
                var directive, link;
                directive = $delegate.apply(this, arguments);
                link = directive.link;
                directive.compile = function(element, attrs) {
                    return function(scope, element, attrs, ctrl) {
                        var disabled, form, name, viewValue;
                        link.apply(this, arguments);
                        form = ctrl[1];
                        name = attrs.eName;
                        disabled = attrs.disabled;
                        if (form != null && name != null) {
                            viewValue = function() {
                                var _ref;
                                return (_ref = form[name]) != null ? _ref.$viewValue : void 0;
                            };
                            scope.$watch(viewValue, function() {
                                var model;
                                model = form[name];
                                if (model != null ? model.$invalid : void 0) {
                                    form.$setError(name, errorsFor(model));
                                }
                                if (model != null ? model.$valid : void 0) {
                                    return form.$setError(name, "");
                                }
                            });
                        }
                        if (form != null && disabled != null) {
                            return scope.disabled = disabled;
                        }
                    };
                };
                return directive;
            };
        } ]);
    } ]);
}).call(this);

(function() {
    var forms;
    forms = angular.module("angleGrinder.forms");
    forms.directive("agDeleteButton", function() {
        return {
            "restrict": "E",
            "replace": true,
            "scope": {
                "whenConfirmed": "&"
            },
            "controller": [ "$scope", function($scope) {
                $scope.confirmation = false;
                $scope.showConfirmation = function() {
                    return $scope.confirmation = true;
                };
                return $scope.doDelete = function() {
                    var promise;
                    $scope.confirmation = false;
                    promise = $scope.whenConfirmed();
                    $scope.deleting = true;
                    return promise != null ? typeof promise["finally"] === "function" ? promise["finally"](function() {
                        return $scope.deleting = false;
                    }) : void 0 : void 0;
                };
            } ],
            "template": '<button type="button"\n        class="btn ag-delete-button"\n        ng-class="{ true: \'btn-warning\', false: \'btn-danger\' }[confirmation]"\n        ng-disabled="deleting"\n        ng-mouseleave="confirmation = false"\n        ng-click="confirmation ? doDelete() : showConfirmation()">\n  <i class="fa fa-trash-o"></i>\n\n  <ng-switch on="confirmation">\n    <span ng-switch-default>Delete</span>\n    <span ng-switch-when="true">Are you sure?</span>\n  </ng-switch>\n\n  <span ng-if="deleting">...</span>\n</button>'
        };
    });
}).call(this);

(function() {
    var forms, __indexOf = [].indexOf || function(item) {
        for (var i = 0, l = this.length; i < l; i++) {
            if (i in this && this[i] === item) return i;
        }
        return -1;
    };
    forms = angular.module("angleGrinder.forms");
    forms.directive("agSubmit", [ "$parse", "$log", "serverValidationErrorsHandler", function($parse, $log, serverValidationErrorsHandler) {
        return {
            "restrict": "A",
            "require": "form",
            "compile": function(element, attrs) {
                var markAsSubmitted, onSubmit;
                onSubmit = $parse(attrs.agSubmit);
                forms = [];
                markAsSubmitted = function(form) {
                    var nestedForm, nestedForms, _i, _len, _results;
                    form.$submitted = true;
                    forms.push(form);
                    nestedForms = _.filter(_.values(form), function(input) {
                        return input instanceof form.constructor && __indexOf.call(forms, input) < 0;
                    });
                    _results = [];
                    for (_i = 0, _len = nestedForms.length; _i < _len; _i++) {
                        nestedForm = nestedForms[_i];
                        _results.push(markAsSubmitted(nestedForm));
                    }
                    return _results;
                };
                return function(scope, element, attrs, formCtrl) {
                    return element.on("submit", function(event) {
                        var promise, resource, result;
                        $log.debug("[forms] submitting form", formCtrl.$name, element, formCtrl);
                        scope.$apply(function() {
                            return markAsSubmitted(formCtrl);
                        });
                        if (formCtrl.$invalid) {
                            return;
                        }
                        result = _.flatten([ onSubmit(scope, {
                            "$event": event
                        }) ]);
                        promise = result[0], resource = result[1];
                        if (promise && angular.isObject(promise)) {
                            formCtrl.$saving = true;
                            promise["finally"](function() {
                                return formCtrl.$saving = false;
                            });
                            promise.then(function() {
                                formCtrl.$setPristine();
                                return formCtrl.$submitted = false;
                            });
                            return promise["catch"](function(response) {
                                if (!angular.isFunction(resource != null ? resource.resourceName : void 0)) {
                                    return;
                                }
                                return serverValidationErrorsHandler(formCtrl, response, resource.resourceName());
                            });
                        }
                    });
                };
            }
        };
    } ]);
}).call(this);

(function() {
    var forms;
    forms = angular.module("angleGrinder.forms");
    forms.directive("agSubmitButton", function() {
        return {
            "restrict": "E",
            "replace": true,
            "scope": true,
            "require": "^form",
            "link": function(scope, element, attrs, formCtrl) {
                var isModalWindow, isSaving;
                if (element[0].offsetParent != null) {
                    isModalWindow = element[0].offsetParent.hasAttribute("modal-window");
                }
                isSaving = function() {
                    return formCtrl.$saving;
                };
                scope.$watch(isSaving, function(saving) {
                    if (!(isModalWindow && scope.saving)) {
                        return scope.saving = saving;
                    }
                });
                return scope.text = attrs.text || "Save";
            },
            "template": '<button type="submit" class="btn btn-default btn-primary"\n        ng-disabled="saving">\n  <i class="fa fa-check fa-inverse"></i> {{text}}<span ng-show="saving">...</span>\n</button>'
        };
    });
}).call(this);

(function() {
    var forms;
    forms = angular.module("angleGrinder.forms");
    forms.directive("autofillPrevent", [ "$parse", function($parse) {
        return {
            "require": "ngModel",
            "link": function(scope, elem, attrs, ngModel) {
                elem.bind("focus", function() {
                    return scope.hasBeenFocused = true;
                });
                return ngModel.$viewChangeListeners.push(function() {
                    if (!scope.hasBeenFocused) {
                        return $parse(attrs.ngModel).assign(scope, ngModel.$setViewValue(""));
                    }
                });
            }
        };
    } ]);
}).call(this);

(function() {
    var forms;
    forms = angular.module("angleGrinder.forms");
    forms.provider("agDate", function() {
        var date, localDate, localDateTime, viewFormat;
        viewFormat = "MM/DD/YYYY";
        date = "YYYY-MM-DDTHH:mmZ";
        localDateTime = "YYYY-MM-DDTHH:mm";
        localDate = "YYYY-MM-DD";
        return {
            "setViewFormat": function(format) {
                return viewFormat = format;
            },
            "setLocalDateFormat": function(format) {
                return localDate = format;
            },
            "setLocalDateTimeFormat": function(format) {
                return localDateTime = format;
            },
            "setDateFormat": function(format) {
                return date = format;
            },
            "$get": [ function() {
                return {
                    "getViewFormat": function() {
                        return viewFormat;
                    },
                    "getIsoFormat": function(name) {
                        switch (name) {
                          case "date":
                            return date;

                          case "localDateTime":
                            return localDateTime;

                          default:
                            return localDate;
                        }
                    },
                    "isValid": function(value, format) {
                        return moment(value, format, true).isValid();
                    }
                };
            } ]
        };
    });
    forms.directive("agDatepicker", [ "$timeout", "agDate", function($timeout, agDate) {
        return {
            "require": "ngModel",
            "restrict": "AE",
            "scope": {
                "datepickerOptions": "@"
            },
            "link": function($scope, $element, $attrs, ngModelCtrl) {
                var defaultOptions, input, isoFormat, options, setPickerValue;
                defaultOptions = {
                    "format": agDate.getViewFormat(),
                    "isoFormat": agDate.getIsoFormat($attrs.dateType)
                };
                options = angular.extend(defaultOptions, $scope.$eval($attrs.datepickerOptions));
                isoFormat = options.isoFormat;
                delete options.isoFormat;
                if ($attrs.agDatepicker == null) {
                    $element.addClass("input-group").addClass("date").addClass("ag-datepicker");
                    input = "<input class='form-control' placeholder='" + ($attrs.placeholder || "") + "' " + ($attrs.disabled != null ? "disabled" : void 0) + '>\n<span class="input-group-addon"><i class="fa fa-calendar"></i></span>';
                    $element.append(input);
                }
                $element.on("dp.change", function(event) {
                    if (ngModelCtrl) {
                        return $timeout(function() {
                            ngModelCtrl.$setViewValue(moment(event.date._d).format(isoFormat));
                            return ngModelCtrl.$setValidity("dateFormat", agDate.isValid(ngModelCtrl.$modelValue, isoFormat));
                        });
                    }
                }).datetimepicker(options);
                setPickerValue = function() {
                    var date, datepicker;
                    date = null;
                    if (ngModelCtrl && ngModelCtrl.$viewValue) {
                        date = moment(ngModelCtrl.$viewValue, isoFormat);
                    }
                    datepicker = $element.data("DateTimePicker");
                    if (datepicker) {
                        return datepicker.date(date);
                    }
                };
                if (ngModelCtrl) {
                    ngModelCtrl.$render = function() {
                        return setPickerValue();
                    };
                }
                return setPickerValue();
            }
        };
    } ]);
    forms.directive("agDate", [ "agDate", function(agDate) {
        return {
            "restrict": "AE",
            "require": "?ngModel",
            "link": function(scope, element, attrs, ngModelCtrl) {
                var dateFormat, modelFormat;
                modelFormat = agDate.getIsoFormat(attrs.dateType);
                dateFormat = attrs.dateFormat || agDate.getViewFormat();
                ngModelCtrl.$parsers.shift();
                ngModelCtrl.$parsers.push(function(viewValue) {
                    var isValid;
                    isValid = agDate.isValid(viewValue, dateFormat);
                    ngModelCtrl.$setValidity("dateFormat", isValid);
                    if (isValid) {
                        return moment(viewValue, dateFormat).format(modelFormat);
                    } else {
                        return "";
                    }
                });
                return ngModelCtrl.$formatters.push(function(modelValue) {
                    var isValid;
                    isValid = agDate.isValid(modelValue, modelFormat);
                    ngModelCtrl.$setValidity("dateFormat", isValid);
                    return moment(modelValue, modelFormat).format(dateFormat);
                });
            }
        };
    } ]);
}).call(this);

(function() {
    var forms;
    forms = angular.module("angleGrinder.forms");
    forms.directive("agCreateButton", function() {
        return {
            "restrict": "E",
            "replace": true,
            "transclude": true,
            "compile": function(element, attrs, trasclude) {
                return {
                    "pre": function(scope, element) {
                        return trasclude(scope, function(clone) {
                            if ($.trim(clone.text()) === "") {
                                return element.append("Create");
                            }
                        });
                    }
                };
            },
            "template": '<a href="" class="btn">\n  <i class="fa fa-pencil-square-o"></i>\n  <span ng-transclude></span>\n</a>'
        };
    });
    forms.directive("agCancelButton", function() {
        return {
            "restrict": "E",
            "replace": true,
            "template": '<button type="button" class="btn">\n  <i class="fa fa-times"></i> Cancel\n</button>'
        };
    });
}).call(this);

(function() {
    var forms, requiredDirective;
    forms = angular.module("angleGrinder.forms");
    forms.value("validationMessages", {
        "required": "This field is required",
        "number": "This field must be a number",
        "mismatch": "Does not match the confirmation",
        "minlength": "This field is too short",
        "maxlength": "This field is too long",
        "email": "Invalid email address",
        "pattern": "Invalid pattern"
    });
    forms.directive("match", [ "isEmpty", function(isEmpty) {
        return {
            "require": "ngModel",
            "link": function(scope, elem, attrs, modelCtrl) {
                var validateEqual, validator;
                validateEqual = function(value, otherValue) {
                    var allEmpty, valid;
                    allEmpty = _.all([ isEmpty(value), isEmpty(otherValue) ]);
                    valid = allEmpty || value === otherValue;
                    modelCtrl.$setValidity("mismatch", valid);
                    return value;
                };
                scope.$watch(attrs.match, function(otherValue) {
                    return validateEqual(modelCtrl.$viewValue, otherValue);
                });
                validator = function(value) {
                    var otherValue;
                    otherValue = scope.$eval(attrs.match);
                    return validateEqual(value, otherValue);
                };
                modelCtrl.$parsers.unshift(validator);
                return modelCtrl.$formatters.unshift(validator);
            }
        };
    } ]);
    forms.directive("agLength", [ "IsFalsyServ", "$parse", function(isFalsy, $parse) {
        return {
            "require": "ngModel",
            "restrict": "A",
            "link": function(scope, elem, attrs, ngModelCtrl) {
                var lengthValidator;
                lengthValidator = function(value) {
                    var length, valid;
                    length = $parse(attrs.agLength)(scope);
                    if (isFalsy(length) || ngModelCtrl.$isEmpty(value)) {
                        valid = true;
                    } else {
                        valid = value.length === length;
                    }
                    ngModelCtrl.$setValidity("length", valid);
                    if (valid) {
                        return value;
                    } else {
                        return void 0;
                    }
                };
                ngModelCtrl.$parsers.unshift(lengthValidator);
                ngModelCtrl.$formatters.push(lengthValidator);
                return scope.$watch(attrs.agLength, function() {
                    return lengthValidator(ngModelCtrl.$viewValue);
                });
            }
        };
    } ]);
    forms.directive("agFieldGroup", [ "$timeout", "$log", "$interpolate", function($timeout, $log, $interpolate) {
        return {
            "restrict": "A",
            "require": "^form",
            "replace": true,
            "transclude": true,
            "template": '<div class="form-group" ng-transclude></div>',
            "link": function(scope, element, attrs, formCtrl) {
                var fields, isSubmitted, toggleErrors;
                fields = _.map((attrs["for"] || "").split(","), function(fieldExpr) {
                    return $interpolate(fieldExpr)(scope);
                });
                toggleErrors = function() {
                    return $timeout(function() {
                        var invalid;
                        invalid = _.map(fields, function(field) {
                            var _ref, _ref1;
                            return ((_ref = formCtrl[field]) != null ? _ref.$invalid : void 0) || ((_ref1 = formCtrl.$serverErrors) != null ? _ref1[field] : void 0);
                        });
                        if (_.any(invalid)) {
                            return element.addClass("has-error");
                        } else {
                            return element.removeClass("has-error");
                        }
                    });
                };
                angular.forEach(fields, function(field) {
                    var getViewValue;
                    getViewValue = function() {
                        var _ref;
                        return (_ref = formCtrl[field]) != null ? _ref.$viewValue : void 0;
                    };
                    return scope.$watch(getViewValue, function() {
                        var _ref;
                        if (!((_ref = formCtrl[field]) != null ? _ref.$dirty : void 0)) {
                            return;
                        }
                        return toggleErrors();
                    });
                });
                angular.forEach(fields, function(field) {
                    var getServerErrors, initial;
                    initial = true;
                    getServerErrors = function() {
                        var _ref;
                        return (_ref = formCtrl.$serverErrors) != null ? _ref[field] : void 0;
                    };
                    return scope.$watch(getServerErrors, function() {
                        if (!initial) {
                            toggleErrors();
                        }
                        return initial = false;
                    });
                });
                isSubmitted = function() {
                    return formCtrl.$submitted;
                };
                return scope.$watch(isSubmitted, function(submitted) {
                    if (!submitted) {
                        return;
                    }
                    return toggleErrors();
                });
            }
        };
    } ]);
    forms.directive("agValidationErrors", [ "validationMessages", "$interpolate", function(validationMessages, $interpolate) {
        return {
            "restrict": "E",
            "require": "^form",
            "replace": true,
            "link": function(scope, element, attrs, formCtrl) {
                var appendError, clearErrors, displayErrorMessages, field, fieldName, getServerErrors, getViewValue, initial, isSubmitted, isValid, messageFor;
                fieldName = $interpolate(attrs["for"])(scope);
                field = formCtrl[fieldName];
                clearErrors = function() {
                    return element.html("");
                };
                messageFor = function(error) {
                    return attrs[error] || validationMessages[error];
                };
                appendError = function(message, klass) {
                    if (klass == null) {
                        klass = "";
                    }
                    return element.append('<span class="help-inline ' + klass + '">' + message + "</span>");
                };
                displayErrorMessages = function() {
                    var error, invalid, message, _ref, _results;
                    clearErrors();
                    _ref = field.$error;
                    _results = [];
                    for (error in _ref) {
                        invalid = _ref[error];
                        if (!invalid) {
                            continue;
                        }
                        message = messageFor(error);
                        if (message != null) {
                            _results.push(appendError(message));
                        } else {
                            _results.push(void 0);
                        }
                    }
                    return _results;
                };
                initial = true;
                isValid = function() {
                    var _ref;
                    return (_ref = formCtrl[fieldName]) != null ? _ref.$valid : void 0;
                };
                scope.$watch(isValid, function() {
                    if (!initial) {
                        displayErrorMessages();
                    }
                    return initial = false;
                });
                getViewValue = function() {
                    var _ref;
                    return (_ref = formCtrl[fieldName]) != null ? _ref.$viewValue : void 0;
                };
                scope.$watch(getViewValue, function() {
                    if (field.$dirty) {
                        return displayErrorMessages();
                    }
                });
                isSubmitted = function() {
                    return formCtrl.$submitted;
                };
                scope.$watch(isSubmitted, function(submitted) {
                    if (submitted) {
                        return displayErrorMessages();
                    }
                });
                getServerErrors = function() {
                    var _ref;
                    return (_ref = formCtrl.$serverErrors) != null ? _ref[fieldName] : void 0;
                };
                return scope.$watch(getServerErrors, function(serverError) {
                    if (serverError != null) {
                        return appendError(serverError, "server-error");
                    } else {
                        return element.find(".server-error").remove();
                    }
                });
            }
        };
    } ]);
    forms.directive("agServerValidationErrors", [ "alerts", function(alerts) {
        return {
            "restrict": "A",
            "require": "^form",
            "link": function(scope, element, attrs, formCtrl) {
                var displayGlobalErrors, getServerErrors;
                formCtrl.$serverErrors = {};
                displayGlobalErrors = function() {
                    var field, message, _ref, _results;
                    _ref = formCtrl.$serverErrors;
                    _results = [];
                    for (field in _ref) {
                        message = _ref[field];
                        if (formCtrl[field]) {
                            continue;
                        }
                        formCtrl.$serverErrors[field] = null;
                        _results.push(alerts.error(message));
                    }
                    return _results;
                };
                getServerErrors = function() {
                    return formCtrl.$serverErrors;
                };
                return scope.$watch(getServerErrors, function(serverErrors) {
                    displayGlobalErrors();
                    return angular.forEach(serverErrors, function(_, field) {
                        var getViewValue, unregister;
                        getViewValue = function() {
                            var _ref;
                            return (_ref = formCtrl[field]) != null ? _ref.$viewValue : void 0;
                        };
                        return unregister = scope.$watch(getViewValue, function(oldVal, newVal) {
                            var _ref;
                            if (oldVal === newVal) {
                                return;
                            }
                            if ((_ref = formCtrl[field]) != null) {
                                _ref.$setValidity("server", true);
                            }
                            formCtrl.$serverErrors[field] = null;
                            return unregister();
                        });
                    });
                });
            }
        };
    } ]);
    forms.factory("serverValidationErrorsHandler", [ "$log", function($log) {
        var setErrors;
        setErrors = function(form, errors) {
            var field, message, _ref, _results;
            form.$serverErrors = {};
            _results = [];
            for (field in errors) {
                message = errors[field];
                if (typeof message === "object" && form[field] != null) {
                    setErrors(form[field], message);
                }
                if (typeof message === "string") {
                    if ((_ref = form[field]) != null) {
                        _ref.$setValidity("server", false);
                    }
                    _results.push(form.$serverErrors[field] = message);
                } else {
                    _results.push(void 0);
                }
            }
            return _results;
        };
        return function(form, response, resourceName) {
            var errors, _ref, _ref1;
            errors = (_ref = response.data) != null ? (_ref1 = _ref.errors) != null ? _ref1[resourceName] : void 0 : void 0;
            if (response.status !== 422 || errors == null) {
                $log.warn("Response does not contain validation errors", response);
                return;
            }
            return setErrors(form, errors);
        };
    } ]);
    requiredDirective = [ function() {
        return {
            "restrict": "A",
            "scope": false,
            "link": function(scope, element) {
                return element.closest(".form-group").find(".control-label").addClass("required");
            }
        };
    } ];
    forms.directive("required", requiredDirective);
    forms.directive("ngRequired", requiredDirective);
}).call(this);

(function() {
    var forms;
    forms = angular.module("angleGrinder.forms");
    forms.factory("focus", [ "$rootScope", "$timeout", function($rootScope, $timeout) {
        return function(name) {
            return $timeout(function() {
                return $rootScope.$broadcast("focusOn", name);
            });
        };
    } ]);
    forms.directive("agFocus", function() {
        return {
            "restrict": "A",
            "link": function(scope, element, attributes) {
                var currentName;
                currentName = attributes.agFocus;
                return scope.$on("focusOn", function(event, name) {
                    if (currentName === name) {
                        element.addClass("ag-focused");
                        return element[0].focus();
                    }
                });
            }
        };
    });
}).call(this);

(function() {
    var forms;
    forms = angular.module("angleGrinder.forms");
    forms.factory("MassUpdateHandler", [ "$log", "alerts", function($log, alerts) {
        return function(grid, result) {
            var error, errorKey, errorValue, id, message, msgKey, msgValue, row, separator, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3;
            $log.info("[forms] Mass update response", result);
            if (result.data != null) {
                _ref = result.data;
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    row = _ref[_i];
                    grid.updateRow(row.id, row);
                }
            } else {
                $log.warn("[forms] Invalid JSON response, missing data array");
            }
            if (result.errors != null) {
                _ref1 = result.errors;
                for (id in _ref1) {
                    error = _ref1[id];
                    grid.flashOnError(id);
                }
                if (result.errors instanceof Array) {
                    if (result.errors.length === 0) {
                        alerts.info("Mass update completed successfully");
                        return;
                    }
                    _ref2 = result.errors;
                    for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
                        error = _ref2[_j];
                        message = ": ";
                        _ref3 = error.errors;
                        for (errorKey in _ref3) {
                            errorValue = _ref3[errorKey];
                            if (typeof errorValue === "object") {
                                for (msgKey in errorValue) {
                                    msgValue = errorValue[msgKey];
                                    if (typeof msgValue === "string") {
                                        separator = message.length > 2 ? "\n" : "";
                                        message = "" + message + separator + msgValue;
                                    }
                                }
                            }
                        }
                        alerts.error(message);
                    }
                }
            } else {
                $log.warn("[forms] Invalid JSON response, missing errors assoc array");
                alerts.info("Mass update completed successfully");
            }
            if (result.message) {
                return alerts.error(result.message);
            }
        };
    } ]);
}).call(this);

(function() {
    var FormDialogCtrl, forms, __bind = function(fn, me) {
        return function() {
            return fn.apply(me, arguments);
        };
    }, __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
        for (var key in parent) {
            if (__hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
            this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
    };
    forms = angular.module("angleGrinder.forms");
    forms.factory("FormDialogServ", [ "$uibModal", "pathWithContext", function($modal, pathWithContext) {
        return {
            "open": function(templateUrl, dialogOptions) {
                var scope;
                if (dialogOptions == null) {
                    dialogOptions = {};
                }
                if (angular.isDefined(dialogOptions.scope)) {
                    scope = dialogOptions.scope;
                }
                return $modal.open({
                    "templateUrl": pathWithContext(templateUrl),
                    "controller": "FormDialogCtrl",
                    "keyboard": false,
                    "backdrop": "static",
                    "scope": scope,
                    "resolve": {
                        "dialogOptions": function() {
                            return dialogOptions;
                        }
                    }
                });
            }
        };
    } ]);
    FormDialogCtrl = function(_super) {
        __extends(FormDialogCtrl, _super);
        function FormDialogCtrl() {
            this["delete"] = __bind(this["delete"], this);
            this.save = __bind(this.save, this);
            this.closeDialog = __bind(this.closeDialog, this);
            return FormDialogCtrl.__super__.constructor.apply(this, arguments);
        }
        FormDialogCtrl.register(forms, "FormDialogCtrl");
        FormDialogCtrl.inject("$scope", "$rootScope", "$log", "$modalInstance", "dialogOptions");
        FormDialogCtrl.prototype.initialize = function() {
            var resourceName, _ref;
            this.$scope.dialogOptions = this.dialogOptions;
            _ref = this.$scope.dialogOptions, this.record = _ref.record, this.grid = _ref.grid;
            resourceName = angular.isFunction(this.record.resourceName) ? this.record.resourceName() : "record";
            this.$scope[resourceName] = this.record;
            if (this.$scope.dialogOptions.exposeRecordToScope) {
                this.$scope.$parent[resourceName] = this.record;
            }
            return this.expose(this.$scope, "closeDialog", "save", "delete");
        };
        FormDialogCtrl.prototype.closeDialog = function() {
            this.$log.info("[ag] closing the dialog");
            return this.$modalInstance.close(this.record);
        };
        FormDialogCtrl.prototype.save = function(record) {
            var promise;
            promise = record.save().$promise;
            promise.then(function(_this) {
                return function(record) {
                    _this.$log.info("[ag] record has been updated/created", record);
                    _this.grid.saveRow(record.id, record);
                    return _this.$scope.closeDialog();
                };
            }(this));
            return [ promise, record ];
        };
        FormDialogCtrl.prototype["delete"] = function() {
            var promise;
            promise = this.record["delete"]().$promise;
            promise.then(function(_this) {
                return function(response) {
                    _this.$log.info("[ag] record has been deleted", response);
                    _this.grid.removeRow(response.id);
                    return _this.$scope.closeDialog();
                };
            }(this));
            promise["catch"](function(_this) {
                return function(response) {
                    return _this.$log.error("[ag] something went wrong", response);
                };
            }(this));
            return promise;
        };
        return FormDialogCtrl;
    }(BaseCtrl);
}).call(this);

(function() {
    var forms;
    forms = angular.module("angleGrinder.forms");
    forms.directive("agTabset", [ "$parse", "$q", function($parse, $q) {
        return {
            "restrict": "E",
            "replace": true,
            "transclude": true,
            "scope": true,
            "require": "agTabset",
            "controller": [ "$log", "$scope", "$location", function($log, $scope, $location) {
                $scope.tabs = [];
                $scope.contentLoading = false;
                $scope.currentTab = function() {
                    return _.findWhere($scope.tabs, {
                        "selected": true
                    });
                };
                $scope.currentTemplateUrl = function() {
                    var currentTab;
                    currentTab = $scope.currentTab();
                    if (currentTab) {
                        return currentTab.tplSrc;
                    }
                };
                $scope.contentLoaded = function() {
                    var tab;
                    $scope.contentLoading = false;
                    tab = $scope.currentTab();
                    tab.loading = false;
                    if (tab.name != null) {
                        $location.search("tab", tab.name);
                    }
                    return $log.debug("[tabs] content loaded", tab);
                };
                this.openTab = function(name) {
                    var deferred, tab, unregister;
                    deferred = $q.defer();
                    tab = _.findWhere($scope.tabs, {
                        "name": name
                    });
                    if (tab == null) {
                        return deferred.promise;
                    }
                    if (!tab.selected) {
                        this._selectTab(tab);
                    }
                    unregister = tab.$watch("loading", function(loading) {
                        if (loading) {
                            return;
                        }
                        deferred.resolve(tab);
                        return unregister();
                    });
                    return deferred.promise;
                };
                this._selectTab = function(tab) {
                    angular.forEach($scope.tabs, function(tab) {
                        return tab.selected = tab.loading = false;
                    });
                    tab.selected = true;
                    tab.loading = true;
                    return $scope.contentLoading = true;
                };
                this._addTab = function(tab, select) {
                    if (select == null) {
                        select = false;
                    }
                    $scope.tabs.push(tab);
                    if (select || $scope.tabs.length === 1) {
                        return this._selectTab(tab);
                    }
                };
            } ],
            "link": function(scope, element, attrs, ctrl) {
                var alias;
                alias = attrs.name;
                if (alias) {
                    return $parse(alias).assign(scope.$parent, ctrl);
                }
            },
            "template": '<div class="container no-padding">\n  <div class="nav nav-tabs" ng-transclude style="margin-bottom: 15px"></div>\n  <div class="tab">\n    <span ng-if="contentLoading">loading the content</span>\n    <ng-include src="currentTemplateUrl()"\n                onload="contentLoaded()"\n                ng-hide="contentLoading"></ng-include>\n  </div>\n</div>'
        };
    } ]);
    forms.directive("agTab", [ "$log", "$location", "pathWithContext", function($log, $location, pathWithContext) {
        return {
            "restrict": "E",
            "replace": true,
            "require": "^agTabset",
            "transclude": true,
            "scope": {
                "templateUrl": "@",
                "name": "@"
            },
            "link": function(scope, element, attrs, tabsetCtrl) {
                var active, getTab;
                scope.tplSrc = pathWithContext(scope.templateUrl);
                scope.selected = false;
                scope.loading = false;
                getTab = function() {
                    return $location.search().tab;
                };
                active = function() {
                    return scope.name != null && getTab() === scope.name;
                };
                tabsetCtrl._addTab(scope, active());
                scope.select = function() {
                    if (scope.selected) {
                        return;
                    }
                    return tabsetCtrl._selectTab(scope);
                };
                return scope.$watch(getTab, function() {
                    if (angular.isDefined(scope.name) && getTab() === scope.name && !scope.selected) {
                        return scope.select();
                    }
                }, true);
            },
            "template": '<li ng-click="select()" ng-class="{active: selected, loading: loading}">\n  <a href="" ng-transclude>{{heading}}</a>\n</li>'
        };
    } ]);
}).call(this);

(function() {
    var forms;
    forms = angular.module("angleGrinder.forms");
    forms.value("getRealPanelHeight", function(el) {
        var bodyEl, height, oldHeight, _ref, _ref1;
        bodyEl = el.find(".panel-body:visible");
        oldHeight = bodyEl.height();
        bodyEl.css("min-height", "auto");
        height = el.height();
        if (angular.element(bodyEl).attr("collapsed")) {
            bodyEl.css("min-height", 0);
        } else {
            if (!(bodyEl != null ? (_ref = bodyEl[0]) != null ? (_ref1 = _ref.attributes) != null ? _ref1["min-height"] : void 0 : void 0 : void 0)) {
                bodyEl.css("min-height", oldHeight);
            }
        }
        if (el.find("[ag-grid]").length > 0) {
            el.find(".panel-heading").css("padding-bottom", "0px");
            bodyEl.css("padding-top", "0px");
        }
        return height;
    });
    forms.directive("agPanelsRow", [ "getRealPanelHeight", function(getHeight) {
        return {
            "restrict": "C",
            "controller": function() {
                this.panels = [];
                this.registerPanel = function(el) {
                    return this.panels.push($(el));
                };
                this.maxHeight = function() {
                    var highest;
                    highest = _.max(this.panels, function(el) {
                        return getHeight(el);
                    });
                    return getHeight(highest);
                };
                this.allEqual = function() {
                    var heights;
                    heights = _.chain(this.panels).map(function(el) {
                        return getHeight(el);
                    }).value();
                    return _.all(heights, function(height) {
                        return height === heights[0];
                    });
                };
                this.equalize = function() {
                    var maxHeight;
                    if (this.allEqual()) {
                        return;
                    }
                    maxHeight = this.maxHeight();
                    return angular.forEach(this.panels, function(el) {
                        var bodyEl, paddings;
                        bodyEl = el.find(".panel-body");
                        paddings = parseInt(bodyEl.css("padding-top")) + parseInt(bodyEl.css("padding-bottom"));
                        paddings += el.find(".panel-heading").outerHeight();
                        paddings += el.find(".panel-footer").outerHeight();
                        return bodyEl.css("min-height", maxHeight - paddings);
                    });
                };
                return this;
            }
        };
    } ]);
    forms.directive("agPanel", [ "getRealPanelHeight", function(getHeight) {
        return {
            "restrict": "C",
            "require": "^agPanelsRow",
            "link": function(scope, element, attrs, ctrl) {
                var elementHeight;
                ctrl.registerPanel(element);
                elementHeight = function() {
                    return getHeight(element);
                };
                return scope.$watch(elementHeight, function() {
                    return ctrl.equalize();
                });
            }
        };
    } ]);
    forms.directive("agPanelStates", [ "$compile", function($compile) {
        return {
            "restrict": "E",
            "transclude": true,
            "controller": [ "$scope", function($scope) {
                var collapseForm, collapseGrid, getAgPanel, isGrid, removeElements;
                $scope.changeState = function(event) {
                    var element, stateButton;
                    stateButton = getAgPanel(event).find('[name="agPanelStates"]').find('[name="stateButton"]');
                    if ($scope.state === "collapsed") {
                        $scope.state = "normal";
                        stateButton.find("i").prop("class", "fa fa-minus");
                    } else {
                        $scope.state = "collapsed";
                        stateButton.find("i").prop("class", "fa fa-plus");
                    }
                    element = getAgPanel(event);
                    if (isGrid(element)) {
                        collapseGrid(element);
                    } else {
                        collapseForm(element);
                    }
                    return true;
                };
                $scope.fullscreenState = function(event) {
                    var panelModal;
                    panelModal = "<panel-modal></panel-modal>";
                    angular.element(getAgPanel(event)).wrap(panelModal);
                    $compile(panelModal)($scope);
                    return true;
                };
                getAgPanel = function(event) {
                    return angular.element(event.target).closest(".ag-panel");
                };
                isGrid = function(element) {
                    return angular.element(element).find("table.gridz").length > 0;
                };
                collapseGrid = function(element) {
                    var gridEl, row, tBody, _i, _j, _len, _len1, _ref, _ref1;
                    gridEl = angular.element(element).find("table.gridz");
                    if ($scope.state === "collapsed") {
                        tBody = angular.element(gridEl).find("tbody");
                        if (angular.element(tBody).find(".ui-state-highlight").length > 0) {
                            _ref = angular.element(gridEl).find("tbody").children();
                            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                                row = _ref[_i];
                                if (!angular.element(row).hasClass("ui-state-highlight") && !angular.element(row).hasClass("jqgfirstrow")) {
                                    angular.element(row).addClass("ng-hide");
                                }
                            }
                        } else {
                            $scope.gridRowNum = gridEl.jqGrid("getGridParam", "rowNum");
                            gridEl.jqGrid("setGridParam", {
                                "rowNum": 1
                            }).trigger("reloadGrid", [ {
                                "page": 1
                            } ]);
                        }
                        angular.element(element).find(".gridz-pager").addClass("ng-hide");
                    }
                    if ($scope.state === "normal") {
                        if ($scope.gridRowNum) {
                            gridEl.jqGrid("setGridParam", {
                                "rowNum": $scope.gridRowNum
                            }).trigger("reloadGrid", [ {
                                "page": 1
                            } ]);
                        } else {
                            _ref1 = angular.element(gridEl).find("tbody").children();
                            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                                row = _ref1[_j];
                                if (angular.element(row).hasClass("ng-hide")) {
                                    angular.element(row).removeClass("ng-hide");
                                }
                                if (angular.element(row).hasClass("ui-state-highlight")) {
                                    angular.element(row).addClass("ui-state-highlight");
                                }
                            }
                        }
                        angular.element(element).find(".gridz-pager").removeClass("ng-hide");
                    }
                };
                collapseForm = function(element) {
                    var clone, el, panelBody, _i, _len;
                    panelBody = angular.element(element).find(".panel-body");
                    if ($scope.state === "collapsed") {
                        clone = angular.element(panelBody).clone();
                        angular.element(panelBody).addClass("ng-hide");
                        angular.element(panelBody).after(clone);
                        removeElements(clone);
                        if (angular.element(clone).children().length === 0) {
                            angular.element(clone).remove();
                        }
                        angular.element(clone).attr("collapsed", "true");
                    }
                    if ($scope.state === "normal") {
                        for (_i = 0, _len = panelBody.length; _i < _len; _i++) {
                            el = panelBody[_i];
                            if (angular.element(el).hasClass("ng-hide")) {
                                angular.element(el).removeClass("ng-hide");
                            } else {
                                angular.element(el).remove();
                            }
                        }
                    }
                };
                return removeElements = function(panelBody) {
                    var child, children, hasElementToStay, _i, _len;
                    children = angular.element(panelBody).children();
                    hasElementToStay = false;
                    for (_i = 0, _len = children.length; _i < _len; _i++) {
                        child = children[_i];
                        if (angular.element(child).is("[stay-on-collapse]")) {
                            hasElementToStay = true;
                        } else if (angular.element(child).children().length > 0) {
                            if (!removeElements(child)) {
                                angular.element(child).remove();
                            } else {
                                hasElementToStay = true;
                            }
                        } else {
                            angular.element(child).remove();
                        }
                    }
                    return hasElementToStay;
                };
            } ],
            "link": function(scope, element, attrs, ctrl, transcludeFn) {
                var buttonList, defaultButtons;
                buttonList = angular.element($compile('<ul name="agPanelStates" class="nav navbar-nav panel-states pull-right"></ul>')(scope));
                transcludeFn(scope, function(cloneContent) {
                    return angular.forEach(cloneContent, function(element) {
                        var li;
                        li = angular.element("<li></li>");
                        if (element instanceof HTMLElement) {
                            return buttonList.append(li.append(angular.element($compile(element)(scope))));
                        }
                    });
                });
                defaultButtons = angular.element($compile('<li>\n  <a name="stateButton" class="list" ng-click="changeState($event)" uib-tooltip="Hide/Show">\n     <i class="fa fa-minus"></i>\n  </a>\n</li>\n<li>\n  <a name="expandButton" class="list" ng-click="fullscreenState($event)" uib-tooltip="Expand">\n    <i class="fa fa-expand"></i>\n  </a>\n</li>\n<li>\n  <a name="compressButton" class="list ng-hide" ng-click="close()" uib-tooltip="Compress">\n    <i class="fa fa-compress"></i>\n  </a>\n</li>')(scope));
                return element.prepend(buttonList.append(defaultButtons));
            }
        };
    } ]);
    forms.directive("panelModal", [ "$compile", "$uibModal", "$document", function($compile, $modal, $document) {
        return {
            "restrict": "E",
            "template": '<div class="modal modal-fullscreen">\n    <div class="modal-body"></div>\n</div>',
            "controller": [ "$scope", function($scope) {
                $scope.open = function() {
                    return $scope.showModal = true;
                };
                $scope.close = function() {
                    return $scope.showModal = false;
                };
                $scope.$on("$locationChangeStart", function(event) {
                    if ($scope.showModal) {
                        event.preventDefault();
                        return $scope.close();
                    }
                });
                $scope.shrinkGridIfExists = function(element) {
                    var gridEl, gridWidth;
                    gridWidth = element.width();
                    gridEl = angular.element(element).find("table.gridz");
                    if (angular.element(gridEl).length > 0) {
                        return gridEl.jqGrid("setGridWidth", gridWidth, true);
                    }
                };
                return $scope.setGridMaxHeight = function(element) {
                    var uiJqgridBdiv;
                    uiJqgridBdiv = angular.element(element).find(".ui-jqgrid-bdiv");
                    if (!$scope.maxHeight) {
                        $scope.maxHeight = angular.element(uiJqgridBdiv).css("max-height");
                        return angular.element(uiJqgridBdiv).css("max-height", "80vh");
                    } else {
                        angular.element(uiJqgridBdiv).css("max-height", $scope.maxHeight);
                        return $scope.maxHeight = void 0;
                    }
                };
            } ],
            "link": function(scope, element) {
                scope.open();
                return scope.$watch(function() {
                    return scope.showModal;
                }, function(newVal) {
                    var agPanelStates, compress, elementScope, expand, modalBody, modalEl, state;
                    modalEl = angular.element($document).find("panel-modal");
                    agPanelStates = angular.element(modalEl).find('[name="agPanelStates"]');
                    elementScope = element.scope();
                    state = agPanelStates.find('[name="stateButton"]');
                    expand = agPanelStates.find('[name="expandButton"]');
                    compress = agPanelStates.find('[name="compressButton"]');
                    if (elementScope) {
                        if (newVal) {
                            state.addClass("ng-hide");
                            expand.addClass("ng-hide");
                            compress.removeClass("ng-hide");
                            element.insertBefore(modalEl);
                            element.find(".modal-body").append(angular.element(modalEl).children());
                            modalBody = element.find(".modal-body").children();
                            angular.element(modalEl).remove();
                            scope.shrinkGridIfExists(modalBody);
                            return scope.setGridMaxHeight(modalBody);
                        } else {
                            state.removeClass("ng-hide");
                            expand.removeClass("ng-hide");
                            compress.addClass("ng-hide");
                            modalBody = angular.element(modalEl).find(".modal-body").children();
                            angular.element(modalBody).insertBefore(modalEl);
                            angular.element(modalEl).remove();
                            scope.shrinkGridIfExists(modalBody);
                            return scope.setGridMaxHeight(modalBody);
                        }
                    }
                });
            }
        };
    } ]);
}).call(this);

(function() {
    var app;
    app = angular.module("angleGrinder.forms");
    app.service("Select2Options", function() {
        return function(options, dataOptions) {
            var ajax, defaults;
            if (options == null) {
                options = {};
            }
            if (dataOptions == null) {
                dataOptions = {};
            }
            options.ajax || (options.ajax = {});
            defaults = {
                "width": "element",
                "initSelection": angular.noop,
                "ajax": {
                    "dataType": "json",
                    "url": angular.noop,
                    "data": function(term, page) {
                        var dataDefaults;
                        if (page == null) {
                            page = 1;
                        }
                        dataDefaults = {
                            "q": term,
                            "sort": "id",
                            "order": "asc",
                            "max": 20,
                            "page": page
                        };
                        return angular.extend(dataDefaults, dataOptions);
                    },
                    "results": function(result, page) {
                        return {
                            "results": result.rows,
                            "more": page < result.total
                        };
                    }
                },
                "formatResult": function(record) {
                    return record.name;
                },
                "formatSelection": function(record) {
                    return record.name;
                }
            };
            ajax = angular.extend(defaults.ajax, options.ajax);
            options = angular.extend(defaults, options);
            options.ajax = ajax;
            return options;
        };
    });
}).call(this);

(function() {
    var mixin;
    mixin = angular.module("angleGrinder.forms");
    mixin.factory("DialogCrudCtrlMixin", [ "$log", "$parse", "FormDialogServ", "ConfirmationDialogServ", "alerts", function($log, $parse, FormDialogServ, ConfirmationDialogServ, alerts) {
        return function($scope, options) {
            var Resource, extraDialogOptions, getGrid, gridName, openEditDialogFor, templateUrl;
            if (options == null) {
                options = {};
            }
            Resource = options.Resource, gridName = options.gridName, templateUrl = options.templateUrl, 
            extraDialogOptions = options.extraDialogOptions;
            getGrid = function() {
                return $parse(gridName)($scope);
            };
            openEditDialogFor = function(record) {
                var dialogOptions;
                dialogOptions = {
                    "record": record,
                    "grid": getGrid(),
                    "scope": $scope
                };
                return FormDialogServ.open(templateUrl, _.extend(dialogOptions, extraDialogOptions));
            };
            $scope.editRecord = function(id) {
                return Resource.get({
                    "id": id
                }, function(record) {
                    if (options.beforeEdit != null) {
                        record = options.beforeEdit(record);
                    }
                    return openEditDialogFor(record);
                });
            };
            $scope.createRecord = function() {
                var record;
                record = new Resource();
                if (options.beforeCreate != null) {
                    record = options.beforeCreate(record);
                }
                return openEditDialogFor(record);
            };
            return $scope.deleteRecord = function(id) {
                return ConfirmationDialogServ.open().then(function(confirmed) {
                    var promise;
                    if (!confirmed) {
                        return;
                    }
                    promise = Resource["delete"]({
                        "id": id
                    }).$promise;
                    promise.then(function(record) {
                        $log.debug("Record deleted " + record.id);
                        return getGrid().removeRow(record.id);
                    });
                    promise["catch"](function(response) {
                        alerts.error(response.data.message);
                        return $log.error("Cannot delete a resource", response);
                    });
                    return promise;
                });
            };
        };
    } ]);
}).call(this);

(function() {
    var mixin;
    mixin = angular.module("angleGrinder.forms");
    mixin.factory("SinglePageCrudCtrlMixin", [ "$log", "$location", "DialogCrudCtrlMixin", function($log, $location, DialogCrudCtrlMixin) {
        return function($scope, args) {
            var Resource, gridName, resourcePath;
            if (args == null) {
                args = {};
            }
            resourcePath = args.resourcePath, gridName = args.gridName, Resource = args.Resource;
            DialogCrudCtrlMixin($scope, {
                "gridName": gridName,
                "Resource": Resource
            });
            $scope.createRecord = angular.noop;
            $scope.showRecord = function(id) {
                var showRecordPath;
                showRecordPath = [ resourcePath, id ].join("/");
                return $location.path(showRecordPath);
            };
            return $scope.editRecord = function(id) {
                var editRecordPath;
                editRecordPath = [ resourcePath, id, "edit" ].join("/");
                return $location.path(editRecordPath);
            };
        };
    } ]);
}).call(this);

(function() {
    var mixin;
    mixin = angular.module("angleGrinder.forms");
    mixin.factory("MassUpdateMixin", [ "$log", "$parse", "$uibModal", "pathWithContext", "NotificationDialogServ", function($log, $parse, $modal, pathWithContext, NotificationDialogServ) {
        return function($scope, args) {
            var controller, extraParams, gridName, templateUrl;
            if (args == null) {
                args = {};
            }
            gridName = args.gridName, templateUrl = args.templateUrl, controller = args.controller, 
            extraParams = args.extraParams;
            if (controller == null) {
                controller = "MassUpdateFormCtrl";
            }
            return $scope.massUpdate = function() {
                var grid, selectedIds;
                grid = $parse(gridName)($scope);
                if (grid == null) {
                    throw new Error("the grid is not defined");
                }
                selectedIds = grid.getSelectedRowIds();
                if (selectedIds.length === 0) {
                    NotificationDialogServ.open("Please select at least one row.");
                    return;
                }
                return $modal.open({
                    "templateUrl": pathWithContext(templateUrl),
                    "controller": controller,
                    "keyboard": false,
                    "backdrop": "static",
                    "resolve": {
                        "selectedIds": function() {
                            return selectedIds;
                        },
                        "grid": function() {
                            return grid;
                        },
                        "extraParams": function() {
                            return extraParams;
                        }
                    }
                });
            };
        };
    } ]);
    mixin.factory("massUpdateFormCtrlMixin", [ "$log", "MassUpdateHandler", function($log, MassUpdateHandler) {
        return function($scope, args) {
            var Resource, beforeSave, dialog, grid, selectedIds;
            if (args == null) {
                args = {};
            }
            dialog = args.dialog, Resource = args.Resource, selectedIds = args.selectedIds, 
            grid = args.grid, beforeSave = args.beforeSave;
            $scope.massUpdate = function(records) {
                var data, params, promise;
                data = angular.copy(records);
                $log.info("[forms] mass update", data);
                if (angular.isFunction(beforeSave)) {
                    data = beforeSave(data);
                }
                params = {
                    "ids": selectedIds,
                    "data": data
                };
                promise = Resource.massUpdate(params).$promise;
                return promise.then(function(result) {
                    MassUpdateHandler(grid, result);
                    grid.clearSelection();
                    $scope.closeDialog();
                    return result;
                });
            };
            return $scope.closeDialog = function() {
                $log.info("[forms] closing the mass update dialog");
                return dialog.close();
            };
        };
    } ]);
}).call(this);

(function() {
    var app;
    app = angular.module("angleGrinder.forms");
    app.directive("agMaxLines", [ "IsFalsyServ", "$parse", function(IsFalsyServ, $parse) {
        return {
            "require": "ngModel",
            "restrict": "A",
            "link": function(scope, elem, attrs, ngModelCtrl) {
                var validator;
                validator = function(value) {
                    var maxLines, numLines, valid;
                    value = value ? value.trim() : value;
                    maxLines = $parse(attrs.agMaxLines)(scope);
                    numLines = (value || "").split("\n").length;
                    valid = IsFalsyServ(maxLines) || numLines <= maxLines;
                    ngModelCtrl.$setValidity("maxlines", valid);
                    if (valid) {
                        return value;
                    } else {
                        return void 0;
                    }
                };
                ngModelCtrl.$parsers.unshift(validator);
                ngModelCtrl.$formatters.push(validator);
                return scope.$watch(attrs.agMaxLines, function() {
                    return validator(ngModelCtrl.$viewValue);
                });
            }
        };
    } ]);
}).call(this);

(function() {
    var app;
    app = angular.module("angleGrinder.forms");
    app.directive("agNumber", function() {
        var NUMBER_REGEXP;
        NUMBER_REGEXP = /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/;
        return {
            "require": "ngModel",
            "restrict": "A",
            "link": function(scope, elem, attrs, ctrl) {
                ctrl.$parsers.push(function(value) {
                    var empty;
                    empty = ctrl.$isEmpty(value);
                    if (empty || NUMBER_REGEXP.test(value)) {
                        if (value === "") {
                            return null;
                        } else if (empty) {
                            return value;
                        } else {
                            return parseFloat(value);
                        }
                    } else {
                        return void 0;
                    }
                });
                return ctrl.$formatters.push(function(value) {
                    if (ctrl.$isEmpty(value)) {
                        return "";
                    } else {
                        return parseFloat(value).toFixed(attrs.fractionSize || 2);
                    }
                });
            }
        };
    });
}).call(this);

(function() {
    var app;
    app = angular.module("angleGrinder.forms");
    app.directive("editablePanelHeading", [ function() {
        return {
            "restrict": "A",
            "transclude": true,
            "replace": true,
            "scope": {
                "form": "=editablePanelHeading"
            },
            "template": '<div class="panel-heading">\n  <h4 class="panel-title">\n    <span ng-transclude></span>\n    <a href="" class="pull-right"\n        ng-click="form.$show()"\n        ng-if="!form.$visible">\n      <i class="fa fa-pencil-square-o"></i>\n    </a>\n  </h4>\n</div>'
        };
    } ]);
}).call(this);

(function() {
    var app;
    app = angular.module("angleGrinder.forms");
    app.factory("PanelFormMixin", [ "$log", function($log) {
        return function($scope, args) {
            var formName;
            if (args == null) {
                args = {};
            }
            formName = args.formName;
            $scope.showForm = false;
            $scope.toggle = function() {
                $log.debug("[ag] toggle form visibility", $scope);
                return $scope.showForm = !$scope.showForm;
            };
            return $scope.update = function(record) {
                var form;
                form = $scope[formName];
                if (form.$invalid) {
                    return;
                }
                $log.info("updating the form", form, record);
                return $scope.showForm = false;
            };
        };
    } ]);
}).call(this);

(function() {
    var app;
    app = angular.module("angleGrinder.common");
    app.directive("agSelectBind", [ "$filter", "$parse", function($filter, $parse) {
        return {
            "restrict": "A",
            "controller": function() {
                this.showValue = function(value) {
                    return angular.isNumber(value) || !!value;
                };
                this.getField = function(objects, id, field, scope) {
                    var element;
                    objects = $parse(objects)(scope);
                    if (id % 1 === 0) {
                        id = angular.fromJson(id);
                    }
                    element = $filter("filter")(objects, {
                        "id": id
                    }, true);
                    if (element != null && element.length > 0) {
                        return element[0][field];
                    } else {
                        return "";
                    }
                };
                return this;
            },
            "compile": function(element) {
                var defaultValue;
                defaultValue = element.html() || "&nbsp;";
                return function(scope, element, attrs, ctrl) {
                    var field;
                    field = attrs.agSelectBindField;
                    return scope.$watch(attrs.agSelectBind, function(value) {
                        var txt;
                        txt = ctrl.showValue(value) ? ctrl.getField(attrs.agSelectBindFor, value, field, scope) : defaultValue;
                        return element.html(txt);
                    });
                };
            }
        };
    } ]);
}).call(this);

(function() {
    var app;
    app = angular.module("angleGrinder.common");
    app.directive("agBind", function() {
        return {
            "restrict": "A",
            "controller": function() {
                this.showValue = function(value) {
                    return angular.isNumber(value) || !!value;
                };
                return this;
            },
            "compile": function(element) {
                var defaultValue;
                defaultValue = element.html() || "&nbsp;";
                return function(scope, element, attrs, ctrl) {
                    return scope.$watch(attrs.agBind, function(value) {
                        var txt;
                        txt = ctrl.showValue(value) ? value : defaultValue;
                        return element.html(txt);
                    });
                };
            }
        };
    });
}).call(this);

(function() {
    var gridz;
    gridz = angular.module("angleGrinder.gridz");
    gridz.directive("agSelect2", [ "$rootScope", "$compile", "$log", "pathWithContext", function($rootScope, $compile, $log, pathWithContext) {
        return {
            "restrict": "E",
            "replace": true,
            "transclude": true,
            "scope": {
                "selectOptions": "=",
                "ngModel": "="
            },
            "compile": function(element, attrs, transclude) {
                var resultTemplate, scope;
                resultTemplate = null;
                scope = $rootScope.$new();
                transclude(scope, function(clone) {
                    var _i, _len, _results;
                    _results = [];
                    for (_i = 0, _len = clone.length; _i < _len; _i++) {
                        element = clone[_i];
                        if (element instanceof HTMLElement && element.getAttribute("ag-select2-result") != null) {
                            resultTemplate = element.outerHTML;
                            break;
                        } else {
                            _results.push(void 0);
                        }
                    }
                    return _results;
                });
                return {
                    "pre": function(scope, element, attrs) {
                        var options;
                        options = angular.copy(scope.selectOptions || {
                            "multiple": true
                        });
                        scope.options = options;
                        if (options.minimumInputLength == null) {
                            options.minimumInputLength = 1;
                        }
                        if (attrs.selectMinimumInputLength != null) {
                            options.minimumInputLength = parseInt(attrs.selectMinimumInputLength);
                        }
                        if (options.width == null) {
                            options.width = "resolve";
                        }
                        if (options.ajax == null && attrs.selectAjaxUrl != null) {
                            options.ajax = {
                                "url": pathWithContext(attrs.selectAjaxUrl),
                                "data": function(term, page) {
                                    return {
                                        "q": term,
                                        "max": 20,
                                        "page": page,
                                        "sort": "name",
                                        "order": "asc"
                                    };
                                },
                                "results": function(data, page) {
                                    var more;
                                    more = page < data.total;
                                    return {
                                        "results": data.rows,
                                        "more": more
                                    };
                                }
                            };
                            options.ajax.quietMillis = 500;
                            if (attrs.selectAjaxQuietMillis != null) {
                                options.ajax.quietMillis = parseInt(attrs.selectAjaxQuietMillis);
                            }
                        }
                        if (resultTemplate != null) {
                            if (options.formatResult == null) {
                                options.formatResult = function(item) {
                                    options = {
                                        "interpolate": /\{\{(.+?)\}\}/g
                                    };
                                    return angular.element(_.template(resultTemplate, {
                                        "item": item
                                    }, options));
                                };
                            }
                        }
                        if (options.formatSelection == null) {
                            options.formatSelection = function(item) {
                                return item.name;
                            };
                        }
                        return $log.debug("[forms] initializing AgSelect2 component", scope.options);
                    }
                };
            },
            "template": '<div class="input-group">\n  <input ui-select2="options" ng-model="ngModel" class="form-control" type="hidden"/>\n</div>'
        };
    } ]);
    gridz.directive("agSelect2Open", function() {
        return {
            "restrict": "E",
            "replace": true,
            "scope": true,
            "controller": [ "$scope", "$element", function($scope, $element) {
                return $scope.openSelect2 = function() {
                    var selectEl;
                    selectEl = $element.parent().find(".select2-container");
                    selectEl.select2("open");
                };
            } ],
            "template": '<span class="input-group-btn">\n  <button class="btn open-select2 btn-default " type="button" ng-click="openSelect2()"><i class="fa fa-search"></i></button>\n</span>'
        };
    });
}).call(this);
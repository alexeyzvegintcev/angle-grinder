(function() {
    var gridz;
    gridz = angular.module("angleGrinder.gridz");
    gridz.directive("agGrid", [ "$timeout", "$log", "$parse", "agGridDataLoader", "ActionPopupHandler", "pathWithContext", "camelize", function($timeout, $log, $parse, agGridDataLoader, ActionPopupHandler, pathWithContext, camelize) {
        var link;
        link = function(scope, element, attrs, gridCtrl) {
            var alias, gridEl, initializeGrid, options, timeoutPromise, unregister;
            gridEl = element.find("table.gridz");
            alias = attrs.agGridName;
            if (alias) {
                $parse(alias).assign(scope, gridCtrl);
            }
            $parse("$grid").assign(scope, gridCtrl);
            options = $parse(attrs.agGrid)(scope);
            if (!options) {
                throw new Error("undefined grid options");
            }
            if (attrs.agGridColModel) {
                options.colModel = angular.fromJson(attrs.agGridColModel);
            }
            scope.$on("$destroy", function() {
                $log.debug("[agGrid] destroying the grid", gridEl);
                return gridEl.jqGrid("GridDestroy");
            });
            initializeGrid = function() {
                var onGridComplete, _gridComplete;
                $log.debug("[agGrid] initializing '" + alias + "' with", options);
                if (options.url == null && options.path != null) {
                    options.url = pathWithContext(options.path);
                }
                if (options.datatype === void 0 || options.datatype === null) {
                    options.datatype = agGridDataLoader(options.url, gridCtrl);
                }
                gridEl.on("jqGridAfterGridComplete", function() {
                    if (options.minRowHeight) {
                        return _.each(gridEl[0].rows, function(it) {
                            return angular.element(it).addClass("min");
                        });
                    }
                });
                if (options.pager !== false) {
                    options.pager = element.find(".gridz-pager").attr("id") || "gridz-pager";
                }
                if (options.selectFirstRow === true) {
                    _gridComplete = options.gridComplete;
                    onGridComplete = function() {
                        var dataIds;
                        dataIds = gridEl.getDataIDs();
                        if (dataIds.length > 0) {
                            gridEl.setSelection(dataIds[0], true);
                        }
                        if (_.isFunction(_gridComplete)) {
                            return _gridComplete.apply(this, arguments);
                        }
                    };
                    options.gridComplete = onGridComplete;
                }
                gridEl.gridz(options);
                ActionPopupHandler(gridEl, scope, attrs);
                return angular.element(element.find("select").wrap('<span class="select-wrapper"></span>'));
            };
            if (element.is(":visible")) {
                return initializeGrid();
            } else {
                $log.info("grid is not visible:", alias);
                timeoutPromise = null;
                return unregister = scope.$watch(function() {
                    $timeout.cancel(timeoutPromise);
                    timeoutPromise = $timeout(function() {
                        if (!element.is(":visible")) {
                            return;
                        }
                        initializeGrid();
                        return unregister();
                    }, 100, false);
                    return false;
                });
            }
        };
        return {
            "restrict": "A",
            "require": "agGrid",
            "controller": "AgGridCtrl",
            "template": '<table class="gridz"></table>\n<div class="gridz-pager"></div>',
            "compile": function(element, attrs) {
                var id;
                id = attrs.agGridName != null ? camelize(attrs.agGridName) : "gridz";
                element.find("table.gridz").attr("id", id);
                element.find("div.gridz-pager").attr("id", "" + id + "-pager");
                console.log(element.find("div"));
                return {
                    "post": link
                };
            }
        };
    } ]);
}).call(this);

(function() {
    var AgGridCtrl, gridz, __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
        for (var key in parent) {
            if (__hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
            this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
    };
    gridz = angular.module("angleGrinder.gridz");
    AgGridCtrl = function(_super) {
        var highlightClass;
        __extends(AgGridCtrl, _super);
        function AgGridCtrl() {
            return AgGridCtrl.__super__.constructor.apply(this, arguments);
        }
        AgGridCtrl.register(gridz, "AgGridCtrl");
        AgGridCtrl.inject("$rootScope", "$element", "$attrs", "$q", "hasSearchFilters", "FlattenServ", "xlsData", "csvData");
        highlightClass = "ui-state-highlight";
        AgGridCtrl.prototype.getGridEl = function() {
            return this.gridEl || (this.gridEl = this.$element.find("table.gridz"));
        };
        AgGridCtrl.prototype.getGridId = function() {
            return this.getGridEl().attr("id");
        };
        AgGridCtrl.prototype.getSelectedRowIds = function() {
            return this.getParam("selarrrow");
        };
        AgGridCtrl.prototype.getSelectedRows = function() {
            var getRowData, ids;
            getRowData = _.bind(this.getRowData, this);
            ids = this.getSelectedRowIds();
            return _.map(ids, function(id) {
                return getRowData(id);
            });
        };
        AgGridCtrl.prototype.clearSelection = function() {
            return this.getGridEl().jqGrid("resetSelection");
        };
        AgGridCtrl.prototype.getRowData = function(rowId) {
            if (rowId == null) {
                rowId = null;
            }
            return this.getGridEl().getRowData(rowId);
        };
        AgGridCtrl.prototype.getAllRows = function() {
            return this.getGridEl().getRowData();
        };
        AgGridCtrl.prototype.addJSONData = function(data) {
            this.getGridEl().get(0).addJSONData(data);
            return this.$rootScope.$broadcast("gridz:loadComplete", data);
        };
        AgGridCtrl.prototype.reload = function(options) {
            var deferred, unregister;
            if (options == null) {
                options = [];
            }
            deferred = this.$q.defer();
            unregister = this.$rootScope.$on("gridz:loadComplete", function(_, data) {
                deferred.resolve(data);
                return unregister();
            });
            this.getGridEl().trigger("reloadGrid", options);
            return deferred.promise;
        };
        AgGridCtrl.prototype.getParam = function(name) {
            return this.getGridEl().getGridParam(name);
        };
        AgGridCtrl.prototype.setParam = function(params) {
            return this.getGridEl().setGridParam(params);
        };
        AgGridCtrl.prototype.updateRow = function(id, data) {
            var diff, flatData, key, prevData, restrictedColumns, _i, _len;
            flatData = this.FlattenServ(data);
            prevData = this.getRowData(id);
            if (prevData != null) {
                diff = _.difference(_.keys(prevData), _.keys(flatData));
                restrictedColumns = function(key) {
                    return !key.match(/^-/);
                };
                diff = diff.filter(restrictedColumns);
                for (_i = 0, _len = diff.length; _i < _len; _i++) {
                    key = diff[_i];
                    flatData[key] = null;
                }
            }
            this.getGridEl().setRowData(id, flatData);
            this.flashOnSuccess(id);
            return this.$rootScope.$broadcast("gridz:rowUpdated", this.$attrs.agGrid, id, data);
        };
        AgGridCtrl.prototype.addRow = function(id, data, position) {
            if (position == null) {
                position = "first";
            }
            this.getGridEl().addRowData(id, this.FlattenServ(data), position);
            this.$rootScope.$broadcast("gridz:rowAdded", this.$attrs.agGrid, id, data);
            return this.flashOnSuccess(id);
        };
        AgGridCtrl.prototype.hasRow = function(id) {
            return !!this.getGridEl().getInd(id);
        };
        AgGridCtrl.prototype.getIds = function() {
            return this.getGridEl().getDataIDs();
        };
        AgGridCtrl.prototype.getCurrentPage = function() {
            return this.getParam("page");
        };
        AgGridCtrl.prototype.getTotalRecords = function() {
            return this.getParam("records");
        };
        AgGridCtrl.prototype.getPageSize = function() {
            return this.getParam("rowNum");
        };
        AgGridCtrl.prototype.getTotalPages = function() {
            return Math.ceil(this.getTotalRecords() / this.getPageSize());
        };
        AgGridCtrl.prototype.isFirstPage = function() {
            var page;
            page = this.getCurrentPage();
            return page === 1;
        };
        AgGridCtrl.prototype.isLastPage = function() {
            var page;
            page = this.getCurrentPage();
            return page === this.getTotalPages();
        };
        AgGridCtrl.prototype.prevPage = function() {
            var page;
            if (this.isFirstPage()) {
                return this.lastPage();
            }
            page = this.getCurrentPage();
            return this.loadPage(page - 1);
        };
        AgGridCtrl.prototype.nextPage = function() {
            var page;
            if (this.isLastPage()) {
                return this.firstPage();
            }
            page = this.getCurrentPage();
            return this.loadPage(page + 1);
        };
        AgGridCtrl.prototype.firstPage = function() {
            return this.loadPage(1);
        };
        AgGridCtrl.prototype.lastPage = function() {
            return this.loadPage(this.getTotalPages());
        };
        AgGridCtrl.prototype.loadPage = function(page) {
            this.setParam({
                "page": page
            });
            return this.reload();
        };
        AgGridCtrl.prototype.saveRow = function(id, data) {
            if (this.hasRow(id)) {
                return this.updateRow(id, data);
            } else {
                return this.addRow(id, data);
            }
        };
        AgGridCtrl.prototype.removeRow = function(id) {
            return this.flashOnSuccess(id, function(_this) {
                return function() {
                    return _this.getGridEl().delRowData(id);
                };
            }(this));
        };
        AgGridCtrl.prototype.search = function(filters) {
            var deferred, params, promise;
            deferred = this.$q.defer();
            params = {
                "page": 1,
                "search": this.hasSearchFilters(filters),
                "postData": {
                    "filters": JSON.stringify(filters)
                }
            };
            this.setParam(params);
            promise = this.reload();
            promise.then(function() {
                return deferred.resolve(filters);
            });
            return deferred.promise;
        };
        AgGridCtrl.prototype.isColumnHidden = function(columnId) {
            var column;
            column = _.findWhere(this.getParam("colModel"), {
                "name": columnId
            });
            return column != null ? column.hidden : void 0;
        };
        AgGridCtrl.prototype.toggleColumn = function(columnId) {
            var showOrHide;
            showOrHide = this.isColumnHidden(columnId) ? "showCol" : "hideCol";
            this.getGridEl().jqGrid(showOrHide, columnId);
            return this._triggerResize();
        };
        AgGridCtrl.prototype.columnChooser = function(options) {
            if (options == null) {
                options = {};
            }
            options.done = function(_this) {
                return function(perm) {
                    var chosenColumns;
                    if (perm) {
                        _this.getGridEl().jqGrid("remapColumns", perm, true);
                    }
                    chosenColumns = _.map(_this._getColModel(), function(column) {
                        return _.pick(column, "name", "hidden");
                    });
                    return window.localStorage.setItem("gridz." + _this.getGridId() + ".chosenColumns", angular.toJson(chosenColumns));
                };
            }(this);
            return this.getGridEl().jqGrid("columnChooser", options);
        };
        AgGridCtrl.prototype.getXlsDataUri = function() {
            return this.xlsData(this.getGridId(), this.getSelectedRowIds());
        };
        AgGridCtrl.prototype.getCsvData = function() {
            return this.csvData(this.getGridId(), this.getSelectedRowIds());
        };
        AgGridCtrl.prototype._triggerResize = function() {
            return this.getGridEl().trigger("resize");
        };
        AgGridCtrl.prototype.flashOnSuccess = function(id, complete) {
            if (complete == null) {
                complete = angular.noop;
            }
            return this._flashRow(id, "#DFF0D8", complete);
        };
        AgGridCtrl.prototype.flashOnError = function(id, complete) {
            if (complete == null) {
                complete = angular.noop;
            }
            return this._flashRow(id, "#FF0000", complete);
        };
        AgGridCtrl.prototype._flashRow = function(id, color, complete) {
            var rowEl;
            if (color == null) {
                color = "#DFF0D8";
            }
            if (complete == null) {
                complete = angular.noop;
            }
            rowEl = $(this.getGridEl()[0].rows.namedItem(id));
            rowEl.css("background-color", color);
            rowEl.delay(250).fadeOut("medium", function() {
                return rowEl.css("background-color", "");
            });
            return rowEl.fadeIn("fast", function() {
                return complete();
            });
        };
        AgGridCtrl.prototype.addClass = function(id, clazz, animation) {
            var rowEl;
            if (animation == null) {
                animation = true;
            }
            rowEl = $(this.getGridEl()[0].rows.namedItem(id));
            if (!rowEl.hasClass(clazz)) {
                if (animation) {
                    rowEl.delay(250).fadeOut("medium", function() {
                        return rowEl.addClass(clazz);
                    });
                    return rowEl.fadeIn("fast", function() {
                        return angular.noop();
                    });
                } else {
                    return rowEl.addClass(clazz);
                }
            }
        };
        AgGridCtrl.prototype.removeClass = function(id, clazz, animation) {
            var rowEl;
            if (animation == null) {
                animation = true;
            }
            rowEl = $(this.getGridEl()[0].rows.namedItem(id));
            if (rowEl.hasClass(clazz)) {
                if (animation) {
                    rowEl.delay(250).fadeOut("medium", function() {
                        return rowEl.removeClass(clazz);
                    });
                    return rowEl.fadeIn("fast", function() {
                        return angular.noop();
                    });
                } else {
                    return rowEl.removeClass(clazz);
                }
            }
        };
        AgGridCtrl.prototype.highlightRow = function(id) {
            var rowEl;
            rowEl = $(this.getGridEl()[0].rows.namedItem(id));
            if (!rowEl.hasClass(highlightClass)) {
                return rowEl.addClass(highlightClass);
            }
        };
        AgGridCtrl.prototype.unHighlightRow = function(id) {
            var rowEl;
            rowEl = $(this.getGridEl()[0].rows.namedItem(id));
            if (rowEl.hasClass(highlightClass)) {
                return rowEl.removeClass(highlightClass);
            }
        };
        return AgGridCtrl;
    }(BaseCtrl);
}).call(this);

(function() {
    var Gridz, currencyUnformatter, _ref, _ref1;
    Gridz = function() {
        function Gridz(element, options) {
            this.init(element, options);
        }
        Gridz.prototype.init = function(element, opts) {
            this.gridEl = $(element);
            this.gridId = this.gridEl.attr("id");
            this.gboxId = "gbox_" + this.gridId;
            this.options = this.getOptions(opts);
            if (this.options.actionPopup) {
                this.addRowActionColumn();
            }
            if (this.options.editOndblClick) {
                this.editOndblClick();
            }
            this.gridEl.jqGrid(this.options);
            if ($.isFunction(this.options.jqGridAfterGridComplete)) {
                this.gridEl.on("jqGridAfterGridComplete", this.options.jqGridAfterGridComplete);
            }
            if ($.isFunction(this.options.jqGridAfterInsertRow)) {
                this.gridEl.on("jqGridAfterInsertRow", this.options.jqGridAfterInsertRow);
            }
            return this.responsiveResize();
        };
        Gridz.prototype.getOptions = function(options) {
            var optBeforeSelectRow, _gridComplete;
            options = $.extend({}, $.fn.gridz.defaults, options);
            optBeforeSelectRow = options.beforeSelectRow;
            options.beforeSelectRow = function(_this) {
                return function(rowid, e) {
                    _this.beforeSelectRow.apply(_this, arguments);
                    if ($.isFunction(optBeforeSelectRow)) {
                        optBeforeSelectRow.apply(_this, arguments);
                    }
                    return true;
                };
            }(this);
            _gridComplete = options.gridComplete;
            options.gridComplete = function(_this) {
                return function() {
                    _this.gridComplete.apply(_this);
                    if ($.isFunction(_gridComplete)) {
                        _gridComplete.apply(_this, arguments);
                    }
                    return _this.gridEl.trigger("gridComplete");
                };
            }(this);
            options.onSortCol = function(_this) {
                return function(sortname, x, order) {
                    var id, idRegex, res, sort, sortArray;
                    if (options.multiSort) {
                        id = options.sortLast || "id";
                        if (sortname.indexOf(id) > -1) {
                            sortname = sortname + (" " + order);
                            sortArray = sortname.split(",");
                            res = [];
                            sort = null;
                            idRegex = new RegExp("(" + id + "[ ]+(asc|desc))");
                            _.each(sortArray, function(it) {
                                it = it.trim();
                                if (idRegex.exec(it) == null) {
                                    return res.push(it);
                                } else {
                                    return sort = it.split(" ");
                                }
                            });
                            if (sort) {
                                res.push(sort[0]);
                            }
                            sortname = res.join(",");
                            _this.gridEl.jqGrid("setGridParam", {
                                "sortname": sortname
                            });
                            if (sort) {
                                return _this.gridEl.jqGrid("setGridParam", {
                                    "order": sort[1]
                                });
                            }
                        }
                    }
                };
            }(this);
            if (options.actionPopup && options.sortable) {
                options.sortable = {
                    "exclude": "#" + this.gridId + "_-row_action_col"
                };
            }
            return options;
        };
        Gridz.prototype.gridComplete = function() {
            if (this.options.actionPopup) {
                return this.actionPopupSetup();
            }
        };
        Gridz.prototype.beforeSelectRow = function(rowid, e) {
            var endRow, i, iEnd, iStart, isCheckBox, rowIdIndex, rows, startId, startRow;
            rows = this.gridEl[0].rows;
            startId = this.gridEl.jqGrid("getGridParam", "selrow");
            isCheckBox = $(e.target).hasClass("cbox");
            if (!e.ctrlKey && !e.shiftKey && !e.metaKey && !isCheckBox) {
                if (this.gridEl.jqGrid("getGridParam", "agMultiboxonly")) {
                    this.gridEl.jqGrid("resetSelection");
                }
            }
            if (startId && e.shiftKey) {
                this.gridEl.jqGrid("resetSelection");
                startRow = rows.namedItem(startId);
                endRow = rows.namedItem(rowid);
                if (startRow && endRow) {
                    iStart = Math.min(startRow.rowIndex, endRow.rowIndex);
                    rowIdIndex = endRow.rowIndex;
                    iEnd = Math.max(startRow.rowIndex, rowIdIndex);
                    i = iStart;
                    while (i <= iEnd) {
                        if (i !== rowIdIndex) {
                            this.gridEl.jqGrid("setSelection", rows[i].id, false);
                        }
                        i++;
                    }
                }
                if (document.selection && document.selection.empty) {
                    document.selection.empty();
                } else {
                    if (window.getSelection) {
                        window.getSelection().removeAllRanges();
                    }
                }
            }
            return true;
        };
        Gridz.prototype.responsiveResize = function() {
            var gboxId;
            gboxId = "#gbox_" + this.gridEl.attr("id");
            return $(window).on("resize", function(_this) {
                return function(event, ui) {
                    var curWidth, parWidth, w;
                    parWidth = $(gboxId).parent().width();
                    curWidth = $(gboxId).width();
                    w = parWidth - 1;
                    if (Math.abs(w - curWidth) > 2) {
                        return _this.gridEl.setGridWidth(w);
                    }
                };
            }(this));
        };
        Gridz.prototype.addRowActionColumn = function() {
            var actionCol, containerId;
            containerId = "gbox_" + this.gridEl.attr("id");
            actionCol = {
                "name": "-row_action_col",
                "label": " ",
                "width": 20,
                "sortable": false,
                "search": false,
                "hidedlg": true,
                "resizable": false,
                "fixed": true,
                "formatter": function(_this) {
                    return function(cellValue, colOptions, rowObject) {
                        var formatter;
                        formatter = _this.options.actionPopup.cellFormatter || _this.actionPopupFormatter;
                        return formatter(containerId, cellValue, colOptions, rowObject);
                    };
                }(this)
            };
            return this.options.colModel.unshift(actionCol);
        };
        Gridz.prototype.actionPopupFormatter = function(containerId) {
            return '<a class="jqg-row-action" data-toggle="popover" href="#"\n   data-container="#' + containerId + '"><i class="fa fa-cog"></i></a>';
        };
        Gridz.prototype.actionPopupSetup = function() {
            var actionMenu, options, self;
            self = this;
            options = this.options;
            actionMenu = "";
            if (options.actionPopup.resetSelection != null && options.actionPopup.resetSelection !== false) {
                options.actionPopup.resetSelection = true;
            }
            if (options.actionPopup.menuList) {
                actionMenu = options.actionPopup.menuList;
            } else {
                actionMenu = '<ul class="dropdown-menu" role="menu">\n  <li><a href="#" class="row_action_show" data-dismiss="clickover">\n    <i class="fa fa-eye"></i>show</a>\n  </li>\n  <li><a href="#" class="row_action_edit" data-dismiss="clickover">\n    <i class="fa fa-pencil-square-o"></i>edit</a>\n  </li>\n  <li><a href="#" class="row_action_delete" data-dismiss="clickover">\n    <i class="fa fa-trash-o"></i>delete</a>\n  </li>\n</ul>';
            }
            return $(".jqg-row-action").clickover({
                "global_close": true,
                "html": true,
                "content": actionMenu,
                "template": '<div class="popover row-action-popover">\n  <div class="arrow"></div>\n  <div class="popover-content dropdown clearfix" style="padding: 0;"></div>\n</div>',
                "onShown": function() {
                    return self.actionPopupOnShow.call(self, this);
                }
            });
        };
        Gridz.prototype.actionPopupOnShow = function(clickoverEl) {
            var id, menuEl, self;
            self = this;
            id = $(clickoverEl.$element, this.gridEl.rows).parents("tr:first").attr("id");
            this.gridEl.data("actionRowId", id);
            if (this.options.actionPopup.resetSelection) {
                this.gridEl.jqGrid("resetSelection");
                this.gridEl.jqGrid("setSelection", id);
            }
            menuEl = $("#" + self.gboxId + " .dropdown-menu");
            menuEl.on("click", "li a.row_action_show", function(_this) {
                return function(e) {
                    e.preventDefault();
                    return _this.gridEl.trigger("showAction", [ id, self ]);
                };
            }(this));
            menuEl.on("click", "li a.row_action_edit", function(_this) {
                return function(e) {
                    e.preventDefault();
                    return _this.gridEl.trigger("editAction", [ id, self ]);
                };
            }(this));
            return menuEl.on("click", "li a.row_action_delete", function(_this) {
                return function(e) {
                    e.preventDefault();
                    return _this.gridEl.trigger("deleteAction", [ id, self ]);
                };
            }(this));
        };
        Gridz.prototype.editOndblClick = function() {
            var grid, self;
            self = this;
            grid = this.gridEl;
            return this.options.ondblClickRow = function(id) {
                return grid.trigger("editAction", [ id, self ]);
            };
        };
        return Gridz;
    }();
    $.extend(true, window, {
        "grinder": {
            "Grid": Gridz
        }
    });
    $.fn.gridz = function(option) {
        var instance, otherArgs;
        if (typeof option === "string") {
            otherArgs = Array.prototype.slice.call(arguments, 1);
            instance = $(this).data("gridz");
            if (instance && instance[option]) {
                instance[option].apply(this, otherArgs);
            } else {}
            return $(this).jqGrid(arguments);
        }
        return this.each(function() {
            var el, options;
            el = $(this);
            instance = el.data("gridz");
            options = typeof option === "object" ? option : {};
            if (!instance) {
                return el.data("gridz", instance = new Gridz(this, options));
            }
        });
    };
    $.fn.gridz.Constructor = Gridz;
    $.fn.gridz.defaults = {
        "prmNames": {
            "page": "page",
            "rows": "max",
            "sort": "sort",
            "order": "order"
        },
        "jsonReader": {
            "repeatitems": false
        },
        "datatype": "json",
        "mtype": "GET",
        "rowNum": 20,
        "rowList": [ 10, 20, 50, 100 ],
        "altRows": true,
        "shrinkToFit": false,
        "autowidth": true,
        "height": "100%",
        "sortable": true,
        "multiselect": true,
        "viewrecords": true,
        "recordtext": "Records {0} - {1} of {2}",
        "beforeSelectRow": null,
        "gridComplete": null,
        "actionPopup": {
            "formatter": null,
            "menuList": null
        }
    };
    $.extend($.fn.fmatter, {
        "date": function(cellVal, options) {
            return window.columnAligner("date", window.agDateFilter(cellVal), options);
        },
        "currency": function(cellVal, options) {
            return window.columnAligner("currency", window.agCurrencyFilter(cellVal), options);
        },
        "currencyOrZero": function(cellVal, options) {
            if (typeof cellVal === "undefined" || cellVal === null || cellVal === "null" || cellVal === "") {
                cellVal = 0;
            }
            return window.columnAligner("currency", window.agCurrencyFilter(cellVal), options);
        },
        "okIcon": function(cellVal, options, rowdata) {
            if (cellVal) {
                return "<i class='fa fa-check'></i>";
            } else {
                return "";
            }
        },
        "editActionLink": function(cellVal, options, rowdata) {
            return '<a class="editActionLink" href="#">' + cellVal + "</a>";
        }
    });
    currencyUnformatter = function(cellVal) {
        if (typeof cellVal === "undefined" || cellVal === null || cellVal === "null" || cellVal === "") {
            return 0;
        } else {
            return parseFloat(cellVal.replace(/[^0-9\.-]+/g, ""));
        }
    };
    $.extend((_ref = $.fn.fmatter) != null ? _ref.currency : void 0, {
        "unformat": currencyUnformatter
    });
    $.extend((_ref1 = $.fn.fmatter) != null ? _ref1.currencyOrZero : void 0, {
        "unformat": currencyUnformatter
    });
    window.columnAligner = function(type, content, options) {
        var _ref2;
        if (options != null ? (_ref2 = options.colModel) != null ? _ref2.align : void 0 : void 0) {
            return content;
        } else {
            return '<div class="' + type + '-content">' + content + "</div>";
        }
    };
}).call(this);

(function() {
    var gridz, __indexOf = [].indexOf || function(item) {
        for (var i = 0, l = this.length; i < l; i++) {
            if (i in this && this[i] === item) return i;
        }
        return -1;
    };
    gridz = angular.module("angleGrinder.gridz");
    gridz.service("agGridDataLoader", [ "$log", "$http", "$document", function($log, $http, $document) {
        return function(url, gridCtrl) {
            return function(params, loadingDivSelector) {
                var loadingEl, promise;
                promise = $http.get(url, {
                    "params": params
                });
                promise.then(function(response) {
                    $log.debug("[gridz] grid data loaded", gridCtrl, response);
                    return gridCtrl.addJSONData(response.data);
                });
                loadingEl = $document.find("#" + $.jgrid.jqID(loadingDivSelector));
                loadingEl.show();
                return promise["finally"](function() {
                    var pendingUrls;
                    pendingUrls = _.map($http.pendingRequests, function(it) {
                        return it.url;
                    });
                    if (__indexOf.call(pendingUrls, url) < 0) {
                        return loadingEl.hide();
                    }
                });
            };
        };
    } ]);
}).call(this);

(function() {
    var gridz;
    gridz = angular.module("angleGrinder.gridz");
    gridz.constant("rootPath", "/");
    gridz.directive("agGridPlaceholder", [ "$log", "$parse", "pathWithContext", "rootPath", function($log, $parse, pathWithContext, rootPath) {
        return {
            "restrict": "E",
            "scope": true,
            "link": function(scope, element, attrs) {
                scope.templateSrc = pathWithContext(attrs.src);
                scope.renderGrid = false;
                if (attrs.forceRenderGrid) {
                    scope.renderGrid = $parse(attrs.forceRenderGrid)(scope);
                }
                scope.showGrid = false;
                return scope.$on("$routeChangeSuccess", function(event, currentRoute) {
                    var currentPath, msg, show;
                    currentPath = currentRoute.originalPath;
                    show = currentPath === rootPath || currentPath === "";
                    if (show) {
                        scope.renderGrid = show;
                    }
                    scope.showGrid = show;
                    msg = show ? "show grid" : "hide grid";
                    return $log.debug("[agGrid]", msg, currentRoute);
                });
            },
            "template": '<div ng-if="renderGrid">\n  <ng-include src="templateSrc" ng-show="showGrid"></ng-include>\n</div>'
        };
    } ]);
}).call(this);

(function() {
    var gridz;
    gridz = angular.module("angleGrinder.gridz");
    gridz.directive("agGridQuickSearch", [ function() {
        return {
            "restrict": "E",
            "scope": {
                "grid": "=for",
                "filters": "=?"
            },
            "link": function($scope) {
                if ($scope.filters == null) {
                    $scope.filters = {};
                }
                angular.extend($scope.filters, {
                    "quickSearch": ""
                });
                return $scope.search = function(filters) {
                    return $scope.grid.search(filters);
                };
            },
            "template": '<form class="search-form pull-right right-margin-5" name="quickSearch"">\n  <input type="text" placeholder="quick search" quick-search-button class="search-query"\n         ng-model="filters.quickSearch"/>\n</form>'
        };
    } ]);
    gridz.directive("quickSearchButton", function() {
        return function(scope, element, attrs) {
            return element.bind("keydown", function(event) {
                if (event.which === 13) {
                    event.preventDefault();
                    scope.search(scope.filters);
                }
                if (event.which === 27) {
                    if (scope.filters) {
                        scope.filters.quickSearch = "";
                    }
                    scope.$apply();
                    return scope.search(scope.filters);
                }
            });
        };
    });
}).call(this);

(function() {
    var gridz;
    gridz = angular.module("angleGrinder.gridz");
    gridz.directive("agReloadGrid", [ function() {
        return {
            "restrict": "E",
            "replace": true,
            "scope": {
                "grid": "=for"
            },
            "link": function($scope) {
                return $scope.reload = function() {
                    var scrollPosition, selRow, selRows;
                    selRow = angular.copy($scope.grid.getParam("selrow"));
                    selRows = angular.copy($scope.grid.getParam("selarrrow"));
                    scrollPosition = $scope.grid.getGridEl().closest(".ui-jqgrid-bdiv").scrollTop();
                    $scope.grid.getGridEl().on("jqGridAfterGridComplete", function() {
                        $scope.grid.clearSelection();
                        if ($scope.grid.getParam("multiselect")) {
                            return _.each(selRows, function(id) {
                                return $scope.grid.getGridEl().jqGrid("setSelection", id);
                            });
                        } else {
                            return $scope.grid.getGridEl().jqGrid("setSelection", selRow);
                        }
                    });
                    return $scope.grid.reload([ {
                        "current": true
                    } ]);
                };
            },
            "template": '<a class="list" uib-tooltip="Reload Grid" ng-click="reload()"><i class="fa fa-refresh"></i></a>'
        };
    } ]);
}).call(this);

(function() {
    var gridz;
    gridz = angular.module("angleGrinder.gridz");
    gridz.directive("agGridXlsExport", [ "$window", "NotificationDialogServ", "$compile", function($window, NotificationDialogServ, $compile) {
        return {
            "restrict": "A",
            "link": function(scope, element, attrs) {
                var exp;
                if (!element[0].firstChild) {
                    exp = angular.element($compile('<i class="fa fa-table" uib-tooltip="Export to Excel"></i>')(scope));
                    element.append(exp);
                }
                return element.on("click", function(event) {
                    var click_ev, csvData, dataUri, grid, iframe, link;
                    event.preventDefault();
                    grid = scope.$grid;
                    if (grid.getSelectedRowIds().length !== 0) {
                        if ($window.navigator.userAgent.indexOf("MSIE ") > 0 || !!$window.navigator.userAgent.match(/Trident.*rv\:11\./)) {
                            iframe = document.createElement("IFRAME");
                            iframe.style.display = "none";
                            document.body.appendChild(iframe);
                            iframe = iframe.contentWindow || iframe.contentDocument;
                            csvData = "sep=|\r\n" + grid.getCsvData();
                            iframe.document.open("text/html", "replace");
                            iframe.document.write(csvData);
                            iframe.document.close();
                            iframe.focus();
                            return iframe.document.execCommand("SaveAs", true, "download.csv");
                        } else {
                            dataUri = grid.getXlsDataUri();
                            link = document.createElement("a");
                            link.href = dataUri;
                            link.setAttribute("download", "download.xls");
                            document.body.appendChild(link);
                            click_ev = document.createEvent("MouseEvents");
                            click_ev.initEvent("click", true, true);
                            return link.dispatchEvent(click_ev);
                        }
                    } else {
                        return NotificationDialogServ.open("Please select at least one row.");
                    }
                });
            }
        };
    } ]);
}).call(this);

(function() {
    var gridz;
    gridz = angular.module("angleGrinder.gridz");
    gridz.service("xlsTemplate", [ "$window", function($window) {
        return function(_arg) {
            var table, worksheet, _ref;
            _ref = _arg != null ? _arg : {
                "worksheet": "Worksheet"
            }, worksheet = _ref.worksheet, table = _ref.table;
            return $window.btoa(unescape(encodeURIComponent('<html xmlns:o="urn:schemas-microsoft-com:office:office"\n      xmlns:x="urn:schemas-microsoft-com:office:excel"\n      xmlns="http://www.w3.org/TR/REC-html40">\n  <head>\n  <!--[if gte mso 9]>\n  <xml>\n    <x:ExcelWorkbook>\n      <x:ExcelWorksheets>\n          <x:ExcelWorksheet>\n          <x:Name>' + worksheet + "</x:Name>\n          <x:WorksheetOptions>\n            <x:DisplayGridlines/>\n          </x:WorksheetOptions>\n        </x:ExcelWorksheet>\n      </x:ExcelWorksheets>\n    </x:ExcelWorkbook>\n  </xml>\n  <![endif]-->\n  </head>\n  <body>\n    <table>" + table + "</table>\n  </body>\n</html>")));
        };
    } ]);
    gridz.service("gridData", [ "$document", "$sanitize", function($document, $sanitize) {
        var findGridEl, prepareHeading, prepareRows;
        findGridEl = function(gridId) {
            return $document.find("div#gbox_" + gridId);
        };
        prepareHeading = function(gridId) {
            var el, gridEl;
            gridEl = findGridEl(gridId);
            el = gridEl.find(".ui-jqgrid-hbox table").clone();
            el.find("th#" + gridId + "_cb").remove();
            el.find("th#" + gridId + "_-row_action_col").remove();
            el.find("tr[style*='display:none']").remove();
            el.find("th").each(function(index, th) {
                var thEl;
                thEl = $(th);
                return thEl.html(thEl.text().trim());
            });
            return el.html();
        };
        prepareRows = function(gridId, selectedIds) {
            var el, gridEl;
            gridEl = findGridEl(gridId);
            el = gridEl.find("#" + gridId).clone();
            el.find("tr.jqgfirstrow").remove();
            el.find("td[aria-describedby='" + gridId + "_cb']").remove();
            el.find("td[aria-describedby='" + gridId + "_-row_action_col']").remove();
            el.find("td a").contents().unwrap();
            if (selectedIds.length > 0) {
                el.find("tr").each(function(index, tr) {
                    var id, rowEl;
                    rowEl = $(tr);
                    id = rowEl.attr("id");
                    if (!_.include(selectedIds, id)) {
                        return el.find("tr#" + id).remove();
                    }
                });
            }
            return el.html();
        };
        return function(gridId, selectedRows) {
            var attr, attrsToRemove, resultEl, _i, _len;
            resultEl = angular.element("<div></div>");
            resultEl.append(prepareHeading(gridId));
            resultEl.append(prepareRows(gridId, selectedRows));
            attrsToRemove = [ "id", "class", "style", "title", "aria-describedby", "aria-labelledby", "aria-multiselectable", "role", "tabindex", "sort" ];
            for (_i = 0, _len = attrsToRemove.length; _i < _len; _i++) {
                attr = attrsToRemove[_i];
                resultEl.find("*").removeAttr(attr);
            }
            return $sanitize(resultEl.html());
        };
    } ]);
    gridz.service("xlsData", [ "xlsTemplate", "gridData", function(xlsTemplate, gridData) {
        return function(gridId, selectedRows) {
            var data;
            if (selectedRows == null) {
                selectedRows = [];
            }
            data = xlsTemplate({
                "table": gridData(gridId, selectedRows),
                "worksheet": "Grid export"
            });
            return "data:application/vnd.ms-excel;base64," + data;
        };
    } ]);
    gridz.service("csvData", [ "gridData", function(gridData) {
        var prepareCsvHeaders, prepareCsvRows;
        prepareCsvHeaders = function(data) {
            var headers, resultEl;
            headers = [];
            resultEl = angular.element("<div></div>");
            resultEl.append(data);
            resultEl.find("th").each(function(index, th) {
                var thEl;
                thEl = $(th);
                return headers.push(thEl.text().trim());
            });
            return headers.join("|");
        };
        prepareCsvRows = function(data) {
            var resultEl, rows;
            rows = "";
            resultEl = angular.element("<div></div>");
            resultEl.append(data);
            resultEl.find("tr").each(function(index, tr) {
                var row, trEl;
                trEl = $(tr);
                row = [];
                trEl.find("td").each(function(index, td) {
                    var tdEl;
                    tdEl = $(td);
                    return row.push(tdEl.text().trim());
                });
                return rows += row.join("|") + "\r\n";
            });
            return rows;
        };
        return function(gridId, selectedRows) {
            if (selectedRows == null) {
                selectedRows = [];
            }
            return prepareCsvHeaders(gridData(gridId, selectedRows)) + prepareCsvRows(gridData(gridId, selectedRows));
        };
    } ]);
}).call(this);

(function() {
    var gridz;
    gridz = angular.module("angleGrinder.gridz");
    gridz.factory("ActionPopupHandler", [ "$log", function($log) {
        return function(gridEl, scope, attrs) {
            var handleAction;
            handleAction = function(action, id) {
                if (scope[action] != null) {
                    $log.info("Trigger '" + action + "' for row '" + id + "'");
                    return scope.$apply(function() {
                        return scope[action](id);
                    });
                } else {
                    return $log.warn("`$scope." + action + "` is not defined");
                }
            };
            gridEl.on("showAction", function(event, id) {
                var action;
                event.preventDefault();
                action = attrs.showAction ? attrs.showAction : "showRecord";
                return handleAction(action, id);
            });
            gridEl.on("editAction", function(event, id) {
                var action;
                event.preventDefault();
                action = attrs.editAction ? attrs.editAction : "editRecord";
                return handleAction(action, id);
            });
            gridEl.on("deleteAction", function(event, id) {
                var action;
                event.preventDefault();
                action = attrs.deleteAction ? attrs.deleteAction : "deleteRecord";
                return handleAction(action, id);
            });
            return gridEl.on("click", "a.editActionLink", function(event) {
                var action, id;
                event.preventDefault();
                id = $(this).parents("tr:first").attr("id");
                action = attrs.editAction ? attrs.editAction : "editRecord";
                return handleAction(action, id);
            });
        };
    } ]);
}).call(this);

(function() {
    var gridz;
    gridz = angular.module("angleGrinder.gridz");
    gridz.value("FlattenServ", function(target, opts) {
        var delimiter, getKey, output, step;
        if (opts == null) {
            opts = {
                "delimiter": "."
            };
        }
        delimiter = opts.delimiter;
        getKey = function(key, prev) {
            if (prev) {
                return prev + delimiter + key;
            } else {
                return key;
            }
        };
        step = function(object, prev) {
            return angular.forEach(Object.keys(object), function(key) {
                var isAngular, isArray, isObject, type;
                isArray = opts.safe && object[key] instanceof Array;
                type = Object.prototype.toString.call(object[key]);
                isObject = type === "[object Object]" || type === "[object Array]";
                isAngular = key.indexOf("$") >= 0;
                if (!isArray && isObject && !isAngular) {
                    return step(object[key], getKey(key, prev));
                }
                return output[getKey(key, prev)] = object[key];
            });
        };
        output = {};
        step(target);
        return output;
    });
}).call(this);

(function() {
    var gridz;
    gridz = angular.module("angleGrinder.gridz");
    gridz.value("hasSearchFilters", function(filters) {
        var value, _;
        for (_ in filters) {
            value = filters[_];
            if (value == null) {
                continue;
            }
            if (typeof value === "string") {
                if ($.trim(value) !== "") {
                    return true;
                }
            } else {
                return true;
            }
        }
        return false;
    });
    gridz.directive("agSearchButton", function() {
        return {
            "restrict": "E",
            "replace": true,
            "template": '<button type="submit" ng-click="advancedSearch(filters)" ng-disabled="searching" class="btn btn-info">\n  <i class="fa fa-search fa-inverse"></i> Search<span ng-show="searching">...</span>\n</button>'
        };
    });
    gridz.directive("agResetSearchButton", function() {
        return {
            "restrict": "E",
            "replace": true,
            "template": '<button type="button" ng-click="resetSearch(filters)" ng-disabled="searching" class="btn">\n  <i class="fa fa-times"></i> Reset<span ng-show="searching">...</span>\n</button>'
        };
    });
    gridz.directive("agSearchForm", [ "$log", function($log) {
        return {
            "restrict": "A",
            "scope": true,
            "require": "^form",
            "link": function(scope, element, attrs, form) {
                return scope.searchForm = form;
            },
            "controller": [ "$scope", "$parse", "$attrs", function($scope, $parse, $attrs) {
                var gridSearch;
                $scope.searching = false;
                gridSearch = function(filters) {
                    var grid, promise;
                    if (filters == null) {
                        filters = {};
                    }
                    grid = $parse($attrs.agSearchForm)($scope);
                    if (grid == null) {
                        $log.warn("[gridz] grid is not defined");
                        return;
                    }
                    promise = grid.search(filters);
                    $scope.searching = true;
                    promise["finally"](function() {
                        return $scope.searching = false;
                    });
                    return promise;
                };
                $scope.advancedSearch = function(filters) {
                    var form;
                    if (filters == null) {
                        filters = {};
                    }
                    form = $scope.searchForm;
                    if (form && form.$invalid) {
                        return $log.info("[gridz] advanced search form is invalid", form);
                    }
                    return gridSearch(filters);
                };
                return $scope.resetSearch = function(filters) {
                    var defaultFilters;
                    if (filters == null) {
                        filters = {};
                    }
                    defaultFilters = $scope.defaultFilters || {};
                    angular.copy(defaultFilters, filters);
                    return gridSearch(filters);
                };
            } ]
        };
    } ]);
}).call(this);

(function() {
    var gridz;
    gridz = angular.module("angleGrinder.gridz");
    gridz.controller("gridPagerCtrlMixin", [ "$log", "$scope", "$parse", "$location", "$q", "gridName", "currentId", "path", function($log, $scope, $parse, $location, $q, gridName, currentId, path) {
        var currIdGetter, currIdSetter, getCurrent, getGrid, getGridIds, nextGridPage, prevGridPage;
        currIdGetter = $parse(currentId);
        currIdSetter = currIdGetter.assign;
        $scope.$watch(currentId, function(id, oldId) {
            if (id == null) {
                return;
            }
            if (id === oldId) {
                return;
            }
            return $location.path(path.replace(":id", id));
        });
        getGrid = function() {
            return $parse(gridName)($scope);
        };
        getGridIds = function() {
            return getGrid().getIds();
        };
        prevGridPage = function() {
            var deferred, promise;
            deferred = $q.defer();
            promise = getGrid().prevPage();
            promise.then(function() {
                var ids;
                ids = getGridIds();
                $log.debug("[agGrid] previous page was loaded", ids);
                return deferred.resolve(ids);
            });
            return deferred.promise;
        };
        nextGridPage = function() {
            var deferred, promise;
            deferred = $q.defer();
            promise = getGrid().nextPage();
            promise.then(function() {
                var ids;
                ids = getGridIds();
                $log.debug("[agGrid] next page was loaded", ids);
                return deferred.resolve(ids);
            });
            return deferred.promise;
        };
        getCurrent = function() {
            var ids;
            ids = getGridIds();
            return [ ids, ids.indexOf(currIdGetter($scope).toString()) ];
        };
        this.show = function() {
            return getGrid() != null;
        };
        this.hasPrevRow = function() {
            var ids, indx, _ref;
            _ref = getCurrent(), ids = _ref[0], indx = _ref[1];
            if (!getGrid().isFirstPage()) {
                return true;
            }
            return indx !== 0;
        };
        this.hasNextRow = function() {
            var ids, indx, _ref;
            _ref = getCurrent(), ids = _ref[0], indx = _ref[1];
            if (!getGrid().isLastPage()) {
                return true;
            }
            return indx !== ids.length - 1;
        };
        this.prevRow = function() {
            var ids, indx, _ref;
            _ref = getCurrent(), ids = _ref[0], indx = _ref[1];
            if (indx > 0) {
                return currIdSetter($scope, ids[indx - 1]);
            } else {
                return prevGridPage().then(function(ids) {
                    return currIdSetter($scope, ids[ids.length - 1]);
                });
            }
        };
        this.nextRow = function() {
            var ids, indx, _ref;
            _ref = getCurrent(), ids = _ref[0], indx = _ref[1];
            if (indx < ids.length - 1) {
                return currIdSetter($scope, ids[indx + 1]);
            } else {
                return nextGridPage().then(function(ids) {
                    return currIdSetter($scope, ids[0]);
                });
            }
        };
        return this;
    } ]);
}).call(this);

(function() {
    var gridz;
    gridz = angular.module("angleGrinder.gridz");
    gridz.value("ApplyFormattersServ", function(colModel, formatters) {
        if (formatters == null) {
            formatters = {};
        }
        return _.map(colModel, function(column) {
            var formatter;
            if (!angular.isString(column.formatter)) {
                return;
            }
            formatter = formatters[column.formatter];
            if (formatter != null) {
                return column.formatter = formatter;
            }
        });
    });
}).call(this);

(function() {
    var gridz;
    gridz = angular.module("angleGrinder.gridz");
    gridz.service("GridLinkServ", [ "pathWithContext", "FlattenServ", function(pathWithContext, FlattenServ) {
        return function(path, name, idField, rowData) {
            var href, id;
            if (rowData == null) {
                rowData = {};
            }
            if (!name) {
                return "";
            }
            href = pathWithContext(path);
            if (idField != null) {
                id = FlattenServ(rowData)[idField];
                if (id == null) {
                    return "";
                }
                href += "#/" + id;
            }
            return '<a href="' + href + '">' + name + "</a>";
        };
    } ]);
}).call(this);

(function() {
    var app;
    app = angular.module("angleGrinder.gridz");
    app.directive("gridCrud", [ "$controller", "$timeout", function($controller, $timeout) {
        return {
            "restrict": "A",
            "replace": true,
            "scope": true,
            "template": '<div  ng-show="showForm"><ng-include ng-if="!isModal" src="template | withContext"></ng-include></div>',
            "link": function(scope, element, attrs) {
                var clicks, controllerName, ctrlLocals;
                clicks = function() {
                    var gridEl;
                    gridEl = angular.element(document.querySelectorAll("[ag-grid-name=" + attrs.gridName + "]")).find("table.gridz");
                    return gridEl.jqGrid("setGridParam", {
                        "ondblClickRow": scope.dblClick
                    });
                };
                attrs.$observe("gridCrud", clicks);
                scope.isModal = attrs.isModal === true || attrs.isModal === "true";
                ctrlLocals = {
                    "$scope": scope,
                    "$element": element,
                    "$attrs": attrs
                };
                controllerName = attrs.controller ? attrs.controller : "GridCrudCtrl";
                $controller(controllerName, ctrlLocals);
                return scope.$watch(function() {
                    return scope.showForm || false;
                }, function(newVal) {
                    if (newVal) {
                        return $timeout(function() {
                            return scope.setFocus(element);
                        });
                    }
                });
            }
        };
    } ]);
    this.GridCrudCtrl = function() {
        GridCrudCtrl.$inject = [ "$scope", "$element", "$attrs", "$parse", "$log", "resourceBuilder", "$window", "restrictResource", "$uibModal", "pathWithContext", "$timeout" ];
        function GridCrudCtrl($scope, $element, $attrs, $parse, $log, resourceBuilder, $window, restrictResource, $uibModal, pathWithContext, $timeout) {
            var Resource, actionSuffix, afterSave, allowedFields, beforeSave, createAction, editAction, grid, hideForm, resourceName, showForm;
            Resource = null;
            beforeSave = null;
            afterSave = null;
            if ($attrs.beforeSave) {
                beforeSave = $scope[$attrs.beforeSave];
            }
            if ($attrs.afterSave) {
                afterSave = $scope[$attrs.afterSave];
            }
            resourceName = $attrs.resource;
            Resource = resourceBuilder("/" + resourceName, resourceName);
            actionSuffix = resourceName.charAt(0).toUpperCase() + resourceName.substring(1);
            $scope.template = $attrs.template;
            grid = function() {
                return $parse($attrs.gridName)($scope);
            };
            allowedFields = $parse($attrs.allowedFields)($scope);
            hideForm = function() {
                if ($scope.isModal) {
                    return $scope.modal.close();
                } else {
                    return $scope.showForm = false;
                }
            };
            showForm = function() {
                if ($scope.isModal) {
                    $scope.modal = $uibModal.open({
                        "templateUrl": pathWithContext($scope.template),
                        "keyboard": false,
                        "backdrop": "static",
                        "scope": $scope,
                        "windowClass": "grid-crud-modal"
                    });
                    return $scope.modal.rendered.then(function() {
                        return $timeout(function() {
                            return $scope.setFocus(angular.element(angular.element(".grid-crud-modal")[0]));
                        }, 500);
                    });
                } else {
                    return $scope.showForm = true;
                }
            };
            editAction = function(id) {
                var record;
                $log.info("[gridCrud] Edit " + resourceName + " : " + id);
                return record = Resource.get({
                    "id": id
                }, function(r) {
                    $scope[resourceName] = restrictResource(r, allowedFields);
                    return showForm();
                });
            };
            createAction = function() {
                var record;
                $log.info("[gridCrud] Create " + resourceName);
                record = new Resource();
                $scope[resourceName] = record;
                return showForm();
            };
            $scope.save = function(_this) {
                return function(record) {
                    var promise;
                    $log.info("[gridCrud] Saving record");
                    if (beforeSave) {
                        $log.info("[gridCrud] Calling beforeSave: " + resourceName);
                        beforeSave(record);
                    }
                    promise = record.save().$promise;
                    promise.then(function(record) {
                        $log.info("[gridCrud] record has been updated/created", record);
                        grid().saveRow(record.id, record);
                        hideForm();
                        if (afterSave) {
                            $log.info("[gridCrud] Calling afterSave: " + resourceName);
                            return afterSave(record);
                        }
                    });
                    return [ promise, record ];
                };
            }(this);
            $scope.cancel = function() {
                return hideForm();
            };
            $scope.dblClick = function(rowid, iRow, iCol, e) {
                $scope.columnNameForFocus = $scope["" + e.currentTarget.id].getGridEl().getGridParam().colModel[iCol]["name"];
                return editAction(rowid);
            };
            $scope.setFocus = function(element) {
                var input, inputs, _i, _len, _results;
                if ($scope.columnNameForFocus) {
                    inputs = element.find("input");
                    _results = [];
                    for (_i = 0, _len = inputs.length; _i < _len; _i++) {
                        input = inputs[_i];
                        if (input.name.toUpperCase() === $scope.columnNameForFocus.toUpperCase()) {
                            input.focus();
                            _results.push(input.select());
                        } else {
                            _results.push(void 0);
                        }
                    }
                    return _results;
                }
            };
            $parse("edit" + actionSuffix).assign($scope.$parent, editAction);
            $parse("create" + actionSuffix).assign($scope.$parent, createAction);
        }
        return GridCrudCtrl;
    }();
    angular.module("angleGrinder.gridz").controller("GridCrudCtrl", GridCrudCtrl);
}).call(this);

(function() {
    var gridz;
    gridz = angular.module("angleGrinder.gridz");
    gridz.directive("agNewButton", [ "$compile", function($compile) {
        return {
            "restrict": "A",
            "link": function(scope, element, attrs) {
                var text;
                text = angular.element($compile('<i class="fa fa-plus" uib-tooltip="Create new"></i> ')(scope));
                return element.append(text);
            }
        };
    } ]);
}).call(this);
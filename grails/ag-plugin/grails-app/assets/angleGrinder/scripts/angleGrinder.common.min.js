(function() {
    var common, __slice = [].slice;
    common = angular.module("angleGrinder.common", [ "ui.bootstrap.modal", "angleGrinder.resources", "duScroll" ]);
    common.config([ "$localeProvider", "$provide", function($localeProvider, $provide) {
        var defaultLocale;
        defaultLocale = $localeProvider.$get();
        angular.extend(defaultLocale.NUMBER_FORMATS.PATTERNS[1], {
            "negPre": "-",
            "negSuf": ""
        });
        return $provide.value("$locale", defaultLocale);
    } ]);
    common.factory("pendingRequests", [ "$http", function($http) {
        var pendingRequests;
        pendingRequests = function() {
            return pendingRequests.any();
        };
        pendingRequests.any = function() {
            return pendingRequests["for"]("GET", "POST", "PUT", "PATCH", "DELETE");
        };
        pendingRequests["for"] = function() {
            var httpMethods, requests;
            httpMethods = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            requests = _.filter($http.pendingRequests, function(request) {
                return _.contains(httpMethods, request.method);
            });
            return requests.length > 0;
        };
        return pendingRequests;
    } ]);
    common.value("camelize", function(str) {
        return str.replace(/(\-|\.|_|\s)+(.)?/g, function(match, p1, p2) {
            if (p2) {
                return p2.toUpperCase();
            } else {
                return "";
            }
        });
    });
}).call(this);

(function() {
    var app;
    app = angular.module("angleGrinder.common");
    app.directive("agBackButton", [ "$window", function($window) {
        return {
            "restrict": "A",
            "link": function(scope, element) {
                return element.on("click", function(event) {
                    event.preventDefault();
                    return $window.history.back();
                });
            }
        };
    } ]);
}).call(this);

(function() {
    var app;
    app = angular.module("angleGrinder.common");
    app.provider("agCurrencyFilter", function() {
        var defaultFormat, defaultSymbol;
        defaultSymbol = "$";
        defaultFormat = "<%= symbol %><%= amount %>";
        return {
            "setDefaultSymbol": function(symbol) {
                return defaultSymbol = symbol;
            },
            "setDefaultFormat": function(format) {
                return defaultFormat = format;
            },
            "$get": [ "$filter", "IsFalsyServ", function($filter, IsFalsyServ) {
                return function(amount, symbol) {
                    var formattedAmount;
                    if (symbol == null) {
                        symbol = defaultSymbol;
                    }
                    if (IsFalsyServ(amount)) {
                        return "";
                    }
                    formattedAmount = $filter("currency")(amount, "");
                    return _.template(defaultFormat)({
                        "amount": formattedAmount,
                        "symbol": symbol
                    });
                };
            } ]
        };
    });
    app.filter("agCurrencyOrZero", [ "agCurrencyFilter", function(agCurrencyFilter) {
        return function(val) {
            if (typeof val === "undefined" || val === null || val === "null" || val === "") {
                val = 0;
            }
            return agCurrencyFilter(val);
        };
    } ]);
}).call(this);

(function() {
    var app;
    app = angular.module("angleGrinder.common");
    app.provider("agDateFilter", function() {
        var defaultFormat;
        defaultFormat = "MMM DD, YYYY";
        return {
            "setDefaultFormat": function(format) {
                return defaultFormat = format;
            },
            "$get": [ "$filter", "IsFalsyServ", function($filter, IsFalsyServ) {
                return function(date, useTimeZone, format) {
                    if (useTimeZone == null) {
                        useTimeZone = false;
                    }
                    if (format == null) {
                        format = defaultFormat;
                    }
                    if (IsFalsyServ(date)) {
                        return "";
                    }
                    return moment(date).format(format);
                };
            } ]
        };
    });
    app.filter("localDate", [ "IsFalsyServ", "agDate", function(IsFalsyServ, agDate) {
        return function(input) {
            if (IsFalsyServ(input)) {
                return "";
            }
            return moment(input).format(agDate.getViewFormat());
        };
    } ]);
    app.filter("localDateTime", [ "IsFalsyServ", function(IsFalsyServ) {
        return function(input) {
            if (IsFalsyServ(input)) {
                return "";
            }
            return moment(input).format("MM/DD/YYYY h:mma");
        };
    } ]);
}).call(this);

(function() {
    var app;
    app = angular.module("angleGrinder.common");
    app.provider("agDateTimeFilter", function() {
        var defaultFormat;
        defaultFormat = "DD MMM YYYY HH:mm A";
        return {
            "setDefaultFormat": function(format) {
                return defaultFormat = format;
            },
            "$get": [ "$filter", function($filter) {
                return function(date, format) {
                    if (format == null) {
                        format = defaultFormat;
                    }
                    return $filter("agDate")(date, true, format);
                };
            } ]
        };
    });
}).call(this);

(function() {
    var app;
    app = angular.module("angleGrinder.common");
    app.filter("checkMark", function() {
        return function(input, options) {
            if (options == null) {
                options = {};
            }
            if (input) {
                if (options.hideTruth) {
                    return "";
                }
                return "\u2713";
            } else {
                if (options.hideFalse) {
                    return "";
                }
                return "\u2718";
            }
        };
    });
}).call(this);

(function() {
    var app;
    app = angular.module("angleGrinder.common");
    app.filter("percentage", function() {
        return function(input, decimals, suffix) {
            decimals = angular.isNumber(decimals) ? decimals : 2;
            suffix = suffix || "%";
            if (!isFinite(input) || input === 0) {
                return "";
            } else {
                return Math.round(input * Math.pow(10, decimals + 2)) / Math.pow(10, decimals) + suffix;
            }
        };
    });
}).call(this);

(function() {
    var app, __slice = [].slice;
    app = angular.module("angleGrinder.common");
    app.service("DeepPickServ", function() {
        var getDeep, setDeep;
        getDeep = function(obj, path) {
            var key, keys, _i, _len;
            keys = path.split(".");
            for (_i = 0, _len = keys.length; _i < _len; _i++) {
                key = keys[_i];
                obj = obj[key];
                if (obj === void 0) {
                    return;
                }
            }
            return obj;
        };
        setDeep = function(obj, path, value) {
            var i, key, keys, n;
            keys = path.split(".");
            i = 0;
            n = keys.length;
            n--;
            while (i < n) {
                key = keys[i++];
                obj = obj[key] = _.isObject(obj[key]) ? obj[key] : {};
            }
            return obj[keys[i]] = value;
        };
        return function() {
            var keys, obj, path, result, value, _i, _len;
            obj = arguments[0], keys = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
            result = new Object();
            for (_i = 0, _len = keys.length; _i < _len; _i++) {
                path = keys[_i];
                value = getDeep(obj, path);
                if (value !== void 0) {
                    setDeep(result, path, value);
                }
            }
            return result;
        };
    });
}).call(this);

(function() {
    var app;
    app = angular.module("angleGrinder.common");
    app.provider("RoutesServ", [ "$routeProvider", "ResourceTemplateServ", function($routeProvider, ResourceTemplateServ) {
        return {
            "setRoutes": function(path) {
                var self;
                this.setOtherwise(path.otherwise);
                self = this;
                return _.forEach(path, function(v, k) {
                    return _.forEach(v, function(data, url) {
                        return $routeProvider.when(url, {
                            "templateUrl": ResourceTemplateServ("/" + k, data.page),
                            "controller": self.getControllerName(data)
                        });
                    });
                });
            },
            "getControllerName": function(data) {
                if (data.controller !== void 0) {
                    return data.controller;
                } else {
                    return data.page.charAt(0).toUpperCase() + data.page.slice(1) + "Ctrl";
                }
            },
            "setOtherwise": function(url) {
                if (url == null) {
                    url = "/";
                }
                return $routeProvider.otherwise({
                    "redirectTo": url
                });
            },
            "$get": function() {}
        };
    } ]);
}).call(this);

(function() {
    var app;
    app = angular.module("angleGrinder.common");
    app.filter("newLines", function() {
        return function(text) {
            if (!angular.isString(text)) {
                return text;
            }
            return text.replace(/\n/g, "<br />");
        };
    });
}).call(this);

(function() {
    var app;
    app = angular.module("angleGrinder.common");
    app.value("urlBuilder", function(path, params) {
        var queryString;
        if (params == null) {
            params = {};
        }
        queryString = _.chain(params).map(function(value, key) {
            return "" + key + "=" + value;
        }).join("&").value();
        return _.filter([ path, queryString ], function(part) {
            return part.length > 0;
        }).join("?");
    });
    app.provider("pathWithContext", function() {
        var contextPath, sanitizePath;
        contextPath = "/";
        sanitizePath = function(path) {
            if (path.length === 0) {
                return "/";
            }
            return "/" + path.replace(/\/*$/, "").replace(/^\/*/, "");
        };
        return {
            "setContextPath": function(path) {
                contextPath = sanitizePath(path);
            },
            "$get": [ "urlBuilder", function(urlBuilder) {
                return function(path, params) {
                    if (params == null) {
                        params = {};
                    }
                    path = _.filter([ contextPath, sanitizePath(path) ], function(part) {
                        return part != null && part !== "/";
                    }).join("");
                    return urlBuilder(path, params);
                };
            } ]
        };
    });
    app.filter("withContext", [ "pathWithContext", function(pathWithContext) {
        return function(path) {
            return pathWithContext(path);
        };
    } ]);
}).call(this);

(function() {
    var app;
    app = angular.module("angleGrinder.common");
    app.service("ConfirmationDialogServ", [ "$log", "$q", function($log, $q) {
        return {
            "open": function(options) {
                var defer;
                if (options == null) {
                    options = {};
                }
                if (angular.isString(options)) {
                    options = {
                        "message": options
                    };
                }
                if (options.message == null) {
                    options.message = "Are you sure?";
                }
                if (options.cancelLabel == null) {
                    options.cancelLabel = "Cancel";
                }
                if (options.okLabel == null) {
                    options.okLabel = "Ok";
                }
                if (options.closeOnConfirm == null) {
                    options.closeOnConfirm = true;
                }
                $log.info("[ag] opening confirmation dialog", options);
                defer = $q.defer();
                swal({
                    "title": options.message,
                    "allowEscapeKey": false,
                    "showCancelButton": true,
                    "confirmButtonText": options.okLabel,
                    "cancelButtonText": options.cancelLabel,
                    "closeOnConfirm": options.closeOnConfirm
                }, function(isConfirmed) {
                    return defer.resolve(isConfirmed);
                });
                return defer.promise;
            }
        };
    } ]);
}).call(this);

(function() {
    var NotificationDialog, NotificationDialogCtrl, app, __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
        for (var key in parent) {
            if (__hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
            this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
    };
    app = angular.module("angleGrinder.common");
    NotificationDialogCtrl = function(_super) {
        __extends(NotificationDialogCtrl, _super);
        function NotificationDialogCtrl() {
            return NotificationDialogCtrl.__super__.constructor.apply(this, arguments);
        }
        NotificationDialogCtrl.register(app, "NotificationDialogCtrl");
        NotificationDialogCtrl.inject("$scope", "$log", "options");
        NotificationDialogCtrl.prototype.initialize = function() {
            return this.expose(this.$scope, "options", "close");
        };
        NotificationDialogCtrl.prototype.close = function() {
            return this.$log.info("Closing notification dialog");
        };
        return NotificationDialogCtrl;
    }(BaseCtrl);
    NotificationDialog = function() {
        NotificationDialog.$inject = [ "$log", "$q" ];
        function NotificationDialog($log, $q) {
            this.$log = $log;
            this.$q = $q;
        }
        NotificationDialog.prototype.open = function(options) {
            var defer;
            if (angular.isString(options)) {
                options = {
                    "message": options
                };
            }
            if (options.okLabel == null) {
                options.okLabel = "Ok";
            }
            this.$log.info("Opening notification dialog, message:", options.message);
            defer = this.$q.defer();
            swal({
                "title": options.message,
                "allowEscapeKey": false,
                "confirmButtonText": options.okLabel
            }, function() {
                return defer.resolve({
                    "defer": function() {
                        return defer;
                    }
                });
            });
            return defer.promise;
        };
        return NotificationDialog;
    }();
    app.service("NotificationDialogServ", NotificationDialog);
}).call(this);

(function() {
    var app;
    app = angular.module("angleGrinder.common");
    app.directive("addEmptyOption", function() {
        return {
            "restrict": "A",
            "link": function(scope, element, attrs) {
                element.append("<option value></option>");
                return scope.$watch(attrs.ngModel, function(newVal, oldVal) {
                    if (!newVal) {
                        return angular.element(element.find("[value='']")[0]).css("display", "none");
                    } else {
                        return angular.element(element.find("[value='']")[0]).css("display", "");
                    }
                });
            }
        };
    });
}).call(this);

(function() {
    var app;
    app = angular.module("angleGrinder.common");
    app.directive("ieSelectFix", [ "$window", function($window) {
        return {
            "restrict": "A",
            "link": function(scope, elem, attrs, ctrl) {
                return elem.bind("change", function(event) {
                    var option, _i, _len, _results;
                    if ($window.navigator.userAgent.indexOf("MSIE 9") > 0) {
                        _results = [];
                        for (_i = 0, _len = elem.length; _i < _len; _i++) {
                            option = elem[_i];
                            _results.push(option.parentNode.insertBefore(option, option));
                        }
                        return _results;
                    }
                });
            }
        };
    } ]);
}).call(this);

(function() {
    var app;
    app = angular.module("angleGrinder.common");
    app.directive("agFileUpload", function() {
        return {
            "restrict": "A",
            "require": "ngModel",
            "link": function(scope, elem, attrs, ctrl) {
                return elem.bind("change", function(event) {
                    return scope.$apply(function(self) {
                        ctrl.$setViewValue(elem.val());
                        ctrl.$render();
                        return self[attrs.agFileUpload](event);
                    });
                });
            }
        };
    });
}).call(this);

(function() {
    var app;
    app = angular.module("angleGrinder.common");
    app.factory("EmbeddedJsonServ", [ "$document", function($document) {
        return function(name) {
            var node, selector, val;
            selector = "script[type='application/embedded-json'][name='" + name + "']";
            node = $(selector);
            val = void 0;
            if (node.length > 0) {
                val = angular.fromJson(node[0].innerHTML);
            }
            return val;
        };
    } ]);
}).call(this);

(function() {
    var app;
    app = angular.module("angleGrinder.common");
    app.constant("contextPath", $("body").data("contextPath"));
    app.constant("ResourceTemplateServ", function(resource, path) {
        var parts;
        parts = [];
        parts.push($("body").data("contextPath"));
        parts.push(resource.replace(/^\//, ""));
        parts.push(path);
        return parts.join("/");
    });
}).call(this);

(function() {
    var app;
    app = angular.module("angleGrinder.common");
    app.directive("agSideMenu", [ "$window", "$timeout", function($window, $timeout) {
        return {
            "restrict": "A",
            "link": function(scope, element, attr) {
                var elScrollTopOriginal, headerHeight, window;
                headerHeight = 0;
                elScrollTopOriginal = 0;
                $timeout(function() {
                    var header;
                    header = angular.element(document.getElementById(attr.header));
                    elScrollTopOriginal = element.offset().top;
                    if (angular.element(header)[0] != null) {
                        return headerHeight = angular.element(header)[0].offsetHeight;
                    }
                });
                window = angular.element($window);
                return window.bind("scroll", function() {
                    if (window[0].pageYOffset > headerHeight) {
                        element.css("position", "fixed").css("top", "" + attr.offset + "px");
                    }
                    if (window[0].pageYOffset <= headerHeight) {
                        return element.css("position", "relative");
                    }
                });
            }
        };
    } ]);
}).call(this);

(function() {
    var app;
    app = angular.module("angleGrinder.common");
    app.value("requiredResourceFields", [ "id" ]);
    app.factory("restrictResource", [ "$log", "DeepDiffServ", "resourceBuilder", "requiredResourceFields", function($log, DeepDiffServ, resourceBuilder, requiredResourceFields) {
        return function(resource, allowedFields) {
            if (allowedFields == null) {
                allowedFields = [];
            }
            angular.extend(resource, {
                "$cacheData": function() {
                    return this.$cachedData = this.resourceData();
                },
                "$save": function() {
                    var Record, cached, record;
                    Record = resourceBuilder(this.resourcePath());
                    cached = _.cloneDeep(this.$cachedData);
                    record = new Record(DeepDiffServ(cached, resource.resourceData(), allowedFields, requiredResourceFields));
                    record.$save();
                    this.$cachedData = _.merge(this.$cachedData, record.resourceData());
                    return this;
                },
                "save": function() {
                    var Record, record;
                    Record = resourceBuilder(this.resourcePath());
                    record = new Record(DeepDiffServ(this.$cachedData, resource.resourceData(), allowedFields, requiredResourceFields));
                    record.save();
                    this.$cachedData = _.merge(this.$cachedData, record.resourceData());
                    return this;
                }
            });
            resource.$cacheData();
            return resource;
        };
    } ]);
}).call(this);

(function() {
    var app;
    app = angular.module("angleGrinder.common");
    app.service("DeepDiffServ", [ "DeepPickServ", function(DeepPickServ) {
        var map;
        map = function(oldVal, newVal, allowed, reqFields) {
            var args, diff;
            diff = {};
            if (reqFields != null && reqFields.length > 0) {
                args = [];
                args.push(newVal);
                args = args.concat(reqFields);
                diff = DeepPickServ.apply(this, args);
            }
            if (allowed != null && allowed.length > 0) {
                args = [];
                args.push(newVal);
                args = args.concat(allowed);
                newVal = DeepPickServ.apply(this, args);
            }
            _.forEach(newVal, function(v, k) {
                if (oldVal != null && _.isEqual(v, oldVal[k]) || k === "$cachedData") {
                    return;
                }
                return diff[k] = _.isObject(v) ? map(oldVal[k], v) : newVal[k];
            });
            return diff;
        };
        return function(oldVal, newVal, allowed, reqFields) {
            if (allowed == null) {
                allowed = [];
            }
            if (reqFields == null) {
                reqFields = [];
            }
            return map(oldVal, newVal, allowed, reqFields);
        };
    } ]);
}).call(this);

(function() {
    var common;
    common = angular.module("angleGrinder.common");
    common.value("isEmpty", function(str) {
        return _.isString(str) && _.isEmpty(str);
    });
    common.service("IsFalsyServ", [ "isEmpty", function(isEmpty) {
        return function(value) {
            if (_.isNaN(value)) {
                return true;
            }
            if (isEmpty(value)) {
                return true;
            }
            if (_.isNull(value)) {
                return true;
            }
            if (_.isUndefined(value)) {
                return true;
            }
            if (value === false) {
                return true;
            }
            return false;
        };
    } ]);
}).call(this);

(function() {
    var spinner;
    spinner = angular.module("angleGrinder.spinner", [ "angleGrinder.common" ]);
    spinner.directive("agSpinner", function() {
        return {
            "replace": true,
            "restrict": "E",
            "controller": [ "$scope", "pendingRequests", function($scope, pendingRequests) {
                return $scope.showSpinner = function() {
                    return pendingRequests.any();
                };
            } ],
            "template": '<li class="spinner">\n  <a href="#"><i ng-class="{spin: showSpinner()}"></i></a>\n</li>'
        };
    });
}).call(this);

(function() {
    var MenuCtrl, app, __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
        for (var key in parent) {
            if (__hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
            this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
    };
    app = angular.module("angleGrinder.common");
    app.directive("menuItem", [ "$route", function($route) {
        return {
            "restrict": "E",
            "transclude": true,
            "replace": true,
            "scope": true,
            "link": function(scope, element, attrs) {
                var listIcon, parent;
                scope.href = "#/" + attrs["for"];
                parent = element.parent();
                if (parent[0].attributes["list-icon"] != null) {
                    listIcon = parent[0].attributes["list-icon"].value;
                }
                scope.icon = attrs.icon || listIcon || "fa fa-circle";
                return scope.isActive = function() {
                    var _ref;
                    return ((_ref = $route.current) != null ? _ref.page : void 0) === attrs["for"];
                };
            },
            "template": '<li ng-class="{ active: isActive() }">\n  <a href="{{href}}">\n    <i class="{{icon}}"></i>\n      <span ng-transclude></span>\n    </a>\n</li>'
        };
    } ]);
    MenuCtrl = function(_super) {
        __extends(MenuCtrl, _super);
        function MenuCtrl() {
            return MenuCtrl.__super__.constructor.apply(this, arguments);
        }
        MenuCtrl.register(app, "agMenuCtrl");
        MenuCtrl.inject("$scope");
        MenuCtrl.prototype.initialize = function() {
            this.status = {};
            return this.$scope.$on("$routeChangeSuccess", function(_this) {
                return function(event, currentRoute) {
                    return _this.status[currentRoute.section] = true;
                };
            }(this));
        };
        return MenuCtrl;
    }(BaseCtrl);
}).call(this);

(function() {
    var app, __indexOf = [].indexOf || function(item) {
        for (var i = 0, l = this.length; i < l; i++) {
            if (i in this && this[i] === item) return i;
        }
        return -1;
    };
    app = angular.module("angleGrinder.common");
    app.directive("tagInput", function() {
        return {
            "restrict": "E",
            "scope": {
                "tags": "=ngModel"
            },
            "link": function($scope, element, attrs) {
                $scope.tagVal = "";
                $scope.style = attrs.style || "";
                $scope.placeholder = attrs.placeholder;
                $scope.defaultWidth = "10px";
                $scope.tagArray = function() {
                    if ($scope.tags === void 0) {
                        return [];
                    }
                    return $scope.tags.split(",").filter(function(tag) {
                        return tag !== "";
                    });
                };
                $scope.addTag = function() {
                    var tagArray, _ref;
                    if ($scope.tagVal.length === 0) {
                        return;
                    }
                    tagArray = $scope.tagArray();
                    if (_ref = $scope.tagVal, __indexOf.call(tagArray, _ref) < 0) {
                        tagArray.push($scope.tagVal);
                        $scope.tags = tagArray.join(",");
                    }
                    return $scope.tagVal = "";
                };
                $scope.deleteTag = function(key) {
                    var tagArray;
                    tagArray = $scope.tagArray();
                    if (tagArray.length > 0 && $scope.tagVal.length === 0 && key === void 0) {
                        tagArray.pop();
                    } else {
                        if (key !== void 0) {
                            tagArray.splice(key, 1);
                        }
                    }
                    return $scope.tags = tagArray.join(",");
                };
                $scope.$watch("tagVal", function(newVal, oldVal) {
                    var tempEl;
                    if (!(newVal === oldVal && newVal === void 0)) {
                        tempEl = $("<span>" + newVal + "</span>").appendTo("body");
                        $scope.inputWidth = tempEl.width() + 5;
                        if ($scope.inputWidth < $scope.defaultWidth) {
                            $scope.inputWidth = $scope.defaultWidth;
                        }
                        return tempEl.remove();
                    }
                });
                element.bind("keydown", function(e) {
                    var key;
                    key = e.which;
                    if (key === 9 || key === 13) {
                        e.preventDefault();
                    }
                    if (key === 8) {
                        return $scope.$apply("deleteTag()");
                    }
                });
                element.bind("keyup", function(e) {
                    var key;
                    key = e.which;
                    if (key === 9 || key === 13 || key === 188) {
                        e.preventDefault();
                        return $scope.$apply("addTag()");
                    }
                });
                return element.bind("focusout", function(e) {
                    e.preventDefault();
                    return $scope.$apply("addTag()");
                });
            },
            "template": "<div class='tagged-input'><div class='tag' ng-repeat=\"tag in tagArray() track by $index\"><a href='javascript:' class='delete-tag' ng-click='deleteTag($index)'><i class='glyphicon glyphicon-remove'></i></a>{{tag}}</div><input type='text' style='width:  {{inputWidth}}' ng-model='tagVal' placeholder='{{placeholder}}'/></div>"
        };
    });
}).call(this);
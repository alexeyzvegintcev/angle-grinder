(function() {
    var Alerts, alerts;
    alerts = angular.module("angleGrinder.alerts", []);
    alerts.value("alertTimeout", 3e3);
    Alerts = function() {
        Alerts.$inject = [ "$log", "$timeout", "alertTimeout" ];
        function Alerts($log, $timeout, alertTimeout) {
            this.$log = $log;
            this.$timeout = $timeout;
            this.alertTimeout = alertTimeout;
            this.alertsOptions = {
                "error": {},
                "info": {},
                "success": {},
                "defaultOptions": {
                    "closeButton": true,
                    "debug": false,
                    "newestOnTop": true,
                    "progressBar": true,
                    "positionClass": "toast-top-right",
                    "preventDuplicates": true,
                    "onclick": null,
                    "showDuration": "100",
                    "hideDuration": "1000",
                    "timeOut": this.alertTimeout,
                    "extendedTimeOut": 0,
                    "showEasing": "swing",
                    "hideEasing": "linear",
                    "showMethod": "fadeIn",
                    "hideMethod": "fadeOut",
                    "tapToDismiss": false
                }
            };
        }
        Alerts.prototype.wrapMessage = function(text, type) {
            var title;
            toastr.options = _.merge(angular.copy(this.alertsOptions.defaultOptions), this.alertsOptions[type]);
            title = type.charAt(0).toUpperCase() + type.substring(1).toLowerCase();
            return toastr[type](text, title);
        };
        Alerts.prototype.success = function(text) {
            return this.wrapMessage(text, "success");
        };
        Alerts.prototype.info = function(text) {
            return this.wrapMessage(text, "info");
        };
        Alerts.prototype.error = function(text) {
            return this.wrapMessage(text, "error");
        };
        Alerts.prototype.setTimeout = function(delay, type) {
            if (type != null) {
                return this.alertsOptions[type].timeOut = delay;
            } else {
                return this.alertsOptions.defaultOptions.timeOut = delay;
            }
        };
        Alerts.prototype.setErrorTimeout = function(delay) {
            return this.setTimeout(delay, "error");
        };
        return Alerts;
    }();
    alerts.service("alerts", Alerts);
}).call(this);